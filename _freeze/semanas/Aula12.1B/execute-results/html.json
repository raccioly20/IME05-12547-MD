{
  "hash": "282a3ee51dd67709ffae5021e92f317b",
  "result": {
    "markdown": "---\ntitle: \"Arvores de Classificação - TidyModels\"\nauthor: \"Ricardo Accioly\"\ndate: \"2023-11-16\"\nexecute: \n  echo: true\n  warning: false\n  message: false\nformat:\n html:\n    code-link: true\n    fig-width: 9\n    fig-height: 7\n    fig-dpi: 300\nknitr:\n  opts_chunk: \n    out.width: 90%\n    comment: \"#>\"\n---\n\n\n## Carregando Bibliotecas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(ISLR)\ndata(Default)\n```\n:::\n\n\n## Manipulando os dados\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncredito <- tibble(Default)\nsummary(credito)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  default    student       balance           income     \n#>  No :9667   No :7056   Min.   :   0.0   Min.   :  772  \n#>  Yes: 333   Yes:2944   1st Qu.: 481.7   1st Qu.:21340  \n#>                        Median : 823.6   Median :34553  \n#>                        Mean   : 835.4   Mean   :33517  \n#>                        3rd Qu.:1166.3   3rd Qu.:43808  \n#>                        Max.   :2654.3   Max.   :73554\n```\n:::\n\n```{.r .cell-code}\n# renomeando colunas\ncredito <- credito %>% \n                rename( inadimplente = default, estudante = student, balanco = balance,\n                receita = income)\ncredito <- credito %>% mutate( inadimplente =  case_when(\n                           inadimplente == \"No\"  ~ \"Nao\",\n                           inadimplente == \"Yes\" ~ \"Sim\"\n                          )) %>% mutate(inadimplente = factor(inadimplente))\ncredito <- credito %>% mutate( estudante =  case_when(\n                           estudante == \"No\"  ~ 0,\n                           estudante == \"Yes\" ~ 1\n                          )) \n```\n:::\n\n\n## Treino e Teste\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(23)\ncredito_split <- initial_split(credito, 0.8, strata = inadimplente)\nconj_treino <- training(credito_split)\nconj_teste <- testing(credito_split)\ncredito_split\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> <Training/Testing/Total>\n#> <8000/2000/10000>\n```\n:::\n:::\n\n\n## Definindo o Modelo/Receita/Workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Modelo\nmodelo_AD <- decision_tree() %>% \n              set_engine(\"rpart\") %>%\n              set_mode(\"classification\")\n# Receita\nreceita_credito <- recipe(inadimplente ~ ., data = conj_treino) %>% \n  step_normalize(all_predictors())\n\n# Workflow\ncredito_wkfl <- workflow() %>% \n    add_model(modelo_AD) %>%\n    add_recipe(receita_credito) \n```\n:::\n\n\n## Treinando o modelo\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(23)\nmodelo_treinado <- credito_wkfl %>% \n  fit(data = conj_treino)\n```\n:::\n\n\n## Avaliando o modelo\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmetricas_credito <- metric_set(accuracy, sensitivity, specificity)\n\nmodelo_treinado %>% \n  predict(conj_teste) %>% \n  bind_cols(conj_teste) %>% \n  metricas_credito(truth = inadimplente, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 3 × 3\n#>   .metric     .estimator .estimate\n#>   <chr>       <chr>          <dbl>\n#> 1 accuracy    binary         0.974\n#> 2 sensitivity binary         0.996\n#> 3 specificity binary         0.348\n```\n:::\n:::\n\n\n## Matriz de confusão\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelo_treinado %>% \n  predict(conj_teste) %>% \n  bind_cols(conj_teste) %>% \n  conf_mat(truth = inadimplente, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>           Truth\n#> Prediction  Nao  Sim\n#>        Nao 1924   45\n#>        Sim    7   24\n```\n:::\n:::\n\n\n## Melhorando o modelo ajustando os parametros\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelo_AD <- decision_tree(cost_complexity = tune(),\n                           tree_depth = tune(),\n                           min_n = tune()) %>%\n              set_engine(\"rpart\") %>%\n              set_mode(\"classification\")\n```\n:::\n\n\n## Definindo a validação cruzada\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(23)\ncredito_vldcruz <- vfold_cv(conj_treino, v=5, strata = inadimplente)\ncredito_vldcruz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> #  5-fold cross-validation using stratification \n#> # A tibble: 5 × 2\n#>   splits              id   \n#>   <list>              <chr>\n#> 1 <split [6400/1600]> Fold1\n#> 2 <split [6400/1600]> Fold2\n#> 3 <split [6400/1600]> Fold3\n#> 4 <split [6400/1600]> Fold4\n#> 5 <split [6400/1600]> Fold5\n```\n:::\n:::\n\n\n## Definindo o grid de parâmetros\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid_AD <- grid_regular(cost_complexity(), tree_depth(), \n                        min_n(), levels = 4)\ngrid_AD\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 64 × 3\n#>    cost_complexity tree_depth min_n\n#>              <dbl>      <int> <int>\n#>  1    0.0000000001          1     2\n#>  2    0.0000001             1     2\n#>  3    0.0001                1     2\n#>  4    0.1                   1     2\n#>  5    0.0000000001          5     2\n#>  6    0.0000001             5     2\n#>  7    0.0001                5     2\n#>  8    0.1                   5     2\n#>  9    0.0000000001         10     2\n#> 10    0.0000001            10     2\n#> # ℹ 54 more rows\n```\n:::\n:::\n\n\n## Ajustando o modelo\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(23)\n\ncredito_rs <- tune_grid(\n  modelo_AD,\n  inadimplente ~ .,\n  resamples = credito_vldcruz,\n  grid = grid_AD,\n  metrics = metric_set(roc_auc, accuracy, kap)\n)\n\ncredito_rs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # Tuning results\n#> # 5-fold cross-validation using stratification \n#> # A tibble: 5 × 4\n#>   splits              id    .metrics           .notes          \n#>   <list>              <chr> <list>             <list>          \n#> 1 <split [6400/1600]> Fold1 <tibble [192 × 7]> <tibble [0 × 3]>\n#> 2 <split [6400/1600]> Fold2 <tibble [192 × 7]> <tibble [0 × 3]>\n#> 3 <split [6400/1600]> Fold3 <tibble [192 × 7]> <tibble [0 × 3]>\n#> 4 <split [6400/1600]> Fold4 <tibble [192 × 7]> <tibble [0 × 3]>\n#> 5 <split [6400/1600]> Fold5 <tibble [192 × 7]> <tibble [0 × 3]>\n```\n:::\n:::\n\n\n## Avaliando o modelo\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(credito_rs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 192 × 9\n#>    cost_complexity tree_depth min_n .metric  .estimator  mean     n std_err\n#>              <dbl>      <int> <int> <chr>    <chr>      <dbl> <int>   <dbl>\n#>  1    0.0000000001          1     2 accuracy binary     0.969     5 0.00192\n#>  2    0.0000000001          1     2 kap      binary     0.358     5 0.0982 \n#>  3    0.0000000001          1     2 roc_auc  binary     0.656     5 0.0434 \n#>  4    0.0000001             1     2 accuracy binary     0.969     5 0.00192\n#>  5    0.0000001             1     2 kap      binary     0.358     5 0.0982 \n#>  6    0.0000001             1     2 roc_auc  binary     0.656     5 0.0434 \n#>  7    0.0001                1     2 accuracy binary     0.969     5 0.00192\n#>  8    0.0001                1     2 kap      binary     0.358     5 0.0982 \n#>  9    0.0001                1     2 roc_auc  binary     0.656     5 0.0434 \n#> 10    0.1                   1     2 accuracy binary     0.966     5 0.00147\n#> # ℹ 182 more rows\n#> # ℹ 1 more variable: .config <chr>\n```\n:::\n\n```{.r .cell-code}\nautoplot(credito_rs) + theme_light(base_family = \"IBMPlexSans\")\n```\n\n::: {.cell-output-display}\n![](Aula12.1B_files/figure-html/unnamed-chunk-10-1.png){width=90%}\n:::\n:::\n\n\n## Selecionando o melhor modelo\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_best(credito_rs, \"kap\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 5 × 9\n#>   cost_complexity tree_depth min_n .metric .estimator  mean     n std_err\n#>             <dbl>      <int> <int> <chr>   <chr>      <dbl> <int>   <dbl>\n#> 1    0.0000000001          5    14 kap     binary     0.375     5  0.0393\n#> 2    0.0000001             5    14 kap     binary     0.375     5  0.0393\n#> 3    0.0001                5    14 kap     binary     0.375     5  0.0393\n#> 4    0.0000000001         10    27 kap     binary     0.359     5  0.0346\n#> 5    0.0000001            10    27 kap     binary     0.359     5  0.0346\n#> # ℹ 1 more variable: .config <chr>\n```\n:::\n\n```{.r .cell-code}\nselect_best(credito_rs, \"kap\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 1 × 4\n#>   cost_complexity tree_depth min_n .config              \n#>             <dbl>      <int> <int> <chr>                \n#> 1    0.0000000001          5    14 Preprocessor1_Model21\n```\n:::\n\n```{.r .cell-code}\nmodelo_final <- finalize_model(modelo_AD, select_best(credito_rs, \"kap\"))\nmodelo_final\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Decision Tree Model Specification (classification)\n#> \n#> Main Arguments:\n#>   cost_complexity = 1e-10\n#>   tree_depth = 5\n#>   min_n = 14\n#> \n#> Computational engine: rpart\n```\n:::\n:::\n\n\n## Usando o modelo final\n\n\n::: {.cell}\n\n```{.r .cell-code}\najuste_final <- fit(modelo_final, inadimplente ~ ., conj_treino)\n```\n:::\n\n\n## Avaliando o novo modelo\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmetricas_credito <- metric_set(accuracy, kap, specificity, sensitivity)\n\najuste_final %>% \n  predict(conj_teste) %>% \n  bind_cols(conj_teste) %>% \n  metricas_credito(truth = inadimplente, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 4 × 3\n#>   .metric     .estimator .estimate\n#>   <chr>       <chr>          <dbl>\n#> 1 accuracy    binary         0.973\n#> 2 kap         binary         0.496\n#> 3 specificity binary         0.406\n#> 4 sensitivity binary         0.993\n```\n:::\n\n```{.r .cell-code}\najuste_final %>% \n  predict(conj_teste) %>% \n  bind_cols(conj_teste) %>% \n  conf_mat(truth = inadimplente, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>           Truth\n#> Prediction  Nao  Sim\n#>        Nao 1918   41\n#>        Sim   13   28\n```\n:::\n:::\n",
    "supporting": [
      "Aula12.1B_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}