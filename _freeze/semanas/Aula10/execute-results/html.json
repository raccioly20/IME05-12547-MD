{
  "hash": "8c7d22c4e0cf7da2947987d23a09c63b",
  "result": {
    "markdown": "---\ntitle: \"LDA e QDA\"\nauthor: \"Ricardo Accioly\"\ndate: \"2022-08-12\"\noutput:\n  html_document:\n    toc: yes\n    code_download: yes\n---\n\n\n## LDA e QDA\n\n\n\n\n\n## Carregando Bibliotecas\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ISLR)\ndata(Default)\nsummary(Default)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n default    student       balance           income     \n No :9667   No :7056   Min.   :   0.0   Min.   :  772  \n Yes: 333   Yes:2944   1st Qu.: 481.7   1st Qu.:21340  \n                       Median : 823.6   Median :34553  \n                       Mean   : 835.4   Mean   :33517  \n                       3rd Qu.:1166.3   3rd Qu.:43808  \n                       Max.   :2654.3   Max.   :73554  \n```\n:::\n\n```{.r .cell-code}\nstr(Default)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t10000 obs. of  4 variables:\n $ default: Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 1 1 1 1 1 1 ...\n $ student: Factor w/ 2 levels \"No\",\"Yes\": 1 2 1 1 1 2 1 2 1 1 ...\n $ balance: num  730 817 1074 529 786 ...\n $ income : num  44362 12106 31767 35704 38463 ...\n```\n:::\n\n```{.r .cell-code}\nhead(Default)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  default student   balance    income\n1      No      No  729.5265 44361.625\n2      No     Yes  817.1804 12106.135\n3      No      No 1073.5492 31767.139\n4      No      No  529.2506 35704.494\n5      No      No  785.6559 38463.496\n6      No     Yes  919.5885  7491.559\n```\n:::\n:::\n\n\n## Manipulando os dados\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncredito <- tibble(Default)\nsummary(credito)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n default    student       balance           income     \n No :9667   No :7056   Min.   :   0.0   Min.   :  772  \n Yes: 333   Yes:2944   1st Qu.: 481.7   1st Qu.:21340  \n                       Median : 823.6   Median :34553  \n                       Mean   : 835.4   Mean   :33517  \n                       3rd Qu.:1166.3   3rd Qu.:43808  \n                       Max.   :2654.3   Max.   :73554  \n```\n:::\n\n```{.r .cell-code}\n# renomeando colunas\ncredito <- credito %>% \n                rename( inadimplente = default, estudante = student, balanco = balance,\n                receita = income)\ncredito <- credito %>% mutate( inadimplente =  case_when(\n                           inadimplente == \"No\"  ~ \"Nao\",\n                           inadimplente == \"Yes\" ~ \"Sim\"\n                          )) %>% mutate(inadimplente = factor(inadimplente))\ncredito <- credito %>% mutate( estudante =  case_when(\n                           estudante == \"No\"  ~ 0,\n                           estudante == \"Yes\" ~ 1\n                          )) \n\nstr(credito)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [10,000 × 4] (S3: tbl_df/tbl/data.frame)\n $ inadimplente: Factor w/ 2 levels \"Nao\",\"Sim\": 1 1 1 1 1 1 1 1 1 1 ...\n $ estudante   : num [1:10000] 0 1 0 0 0 1 0 1 0 0 ...\n $ balanco     : num [1:10000] 730 817 1074 529 786 ...\n $ receita     : num [1:10000] 44362 12106 31767 35704 38463 ...\n```\n:::\n\n```{.r .cell-code}\nsummary(credito)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n inadimplente   estudante         balanco          receita     \n Nao:9667     Min.   :0.0000   Min.   :   0.0   Min.   :  772  \n Sim: 333     1st Qu.:0.0000   1st Qu.: 481.7   1st Qu.:21340  \n              Median :0.0000   Median : 823.6   Median :34553  \n              Mean   :0.2944   Mean   : 835.4   Mean   :33517  \n              3rd Qu.:1.0000   3rd Qu.:1166.3   3rd Qu.:43808  \n              Max.   :1.0000   Max.   :2654.3   Max.   :73554  \n```\n:::\n:::\n\n\n\n## Treino e Teste\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\nset.seed(21)\ny <- credito$inadimplente\nindice_teste <- createDataPartition(y, times = 1, p = 0.2, list = FALSE)\n\nconj_treino <- credito %>% slice(-indice_teste)\nconj_teste <- credito %>% slice(indice_teste)\n\nsummary(conj_treino)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n inadimplente   estudante         balanco          receita     \n Nao:7733     Min.   :0.0000   Min.   :   0.0   Min.   :  772  \n Sim: 266     1st Qu.:0.0000   1st Qu.: 481.3   1st Qu.:21339  \n              Median :0.0000   Median : 819.1   Median :34541  \n              Mean   :0.2953   Mean   : 832.7   Mean   :33541  \n              3rd Qu.:1.0000   3rd Qu.:1167.1   3rd Qu.:43840  \n              Max.   :1.0000   Max.   :2654.3   Max.   :73554  \n```\n:::\n\n```{.r .cell-code}\nsummary(conj_teste)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n inadimplente   estudante         balanco          receita     \n Nao:1934     Min.   :0.0000   Min.   :   0.0   Min.   : 4755  \n Sim:  67     1st Qu.:0.0000   1st Qu.: 483.5   1st Qu.:21371  \n              Median :0.0000   Median : 836.6   Median :34591  \n              Mean   :0.2909   Mean   : 846.2   Mean   :33423  \n              3rd Qu.:1.0000   3rd Qu.:1163.1   3rd Qu.:43646  \n              Max.   :1.0000   Max.   :2461.5   Max.   :71239  \n```\n:::\n:::\n\n\n\n## Balanço e receita\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeaturePlot(x = conj_treino[, c(\"balanco\", \"receita\")], \n            y = conj_treino$inadimplente,\n            plot = \"density\", \n            scales = list(x = list(relation = \"free\"), \n                          y = list(relation = \"free\")), \n            adjust = 1.5, \n            pch = \"|\", \n            layout = c(2, 1), \n            auto.key = list(columns = 2))\n```\n\n::: {.cell-output-display}\n![](imagens/Aula10/balanco-receita-1.png){width=864}\n:::\n:::\n\n\n\n\n\n## Bayes Ingênuo (Naive Bayes)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparams <- conj_treino %>% \n     group_by(inadimplente) %>% \n     summarize(media = mean(balanco), desvpad = sd(balanco))\nparams\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  inadimplente media desvpad\n  <fct>        <dbl>   <dbl>\n1 Nao           801.    456.\n2 Sim          1745.    332.\n```\n:::\n\n```{.r .cell-code}\npi <- conj_treino %>% summarize(pi=mean(inadimplente==\"Sim\")) %>% pull(pi)\npi\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.03325416\n```\n:::\n\n```{.r .cell-code}\nx <- conj_teste$balanco\n\nf0 <- dnorm(x, params$media[1], params$desvpad[1])\nf1 <- dnorm(x, params$media[2], params$desvpad[2])\n\np_chapeu_bayes <- f1*pi / (f1*pi + f0*(1 - pi))\ny_chapeu_bayes <- ifelse(p_chapeu_bayes > 0.5, \"Sim\", \"Nao\")\n\nconfusionMatrix(factor(y_chapeu_bayes), conj_teste$inadimplente,  positive=\"Sim\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction  Nao  Sim\n       Nao 1927   44\n       Sim    7   23\n                                         \n               Accuracy : 0.9745         \n                 95% CI : (0.9666, 0.981)\n    No Information Rate : 0.9665         \n    P-Value [Acc > NIR] : 0.02354        \n                                         \n                  Kappa : 0.4631         \n                                         \n Mcnemar's Test P-Value : 4.631e-07      \n                                         \n            Sensitivity : 0.34328        \n            Specificity : 0.99638        \n         Pos Pred Value : 0.76667        \n         Neg Pred Value : 0.97768        \n             Prevalence : 0.03348        \n         Detection Rate : 0.01149        \n   Detection Prevalence : 0.01499        \n      Balanced Accuracy : 0.66983        \n                                         \n       'Positive' Class : Sim            \n                                         \n```\n:::\n:::\n\n\n\n## Calcula Erro\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_erro_class <- function(real, previsto) {\n  mean(real != previsto)\n}\n# Este valor é igual a 1 - Accuracy da matriz de confusão\ncalc_erro_class(conj_teste$inadimplente, y_chapeu_bayes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.02548726\n```\n:::\n:::\n\n\n\n## Alterando o valor da priori\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_chapeu_bayes <- f1*0.15 / (f1*0.15 + f0*(1 - 0.15))\ny_chapeu_bayes <- ifelse(p_chapeu_bayes > 0.5, \"Sim\", \"Nao\")\n\n\nconfusionMatrix(factor(y_chapeu_bayes), conj_teste$inadimplente,  positive=\"Sim\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction  Nao  Sim\n       Nao 1839   22\n       Sim   95   45\n                                          \n               Accuracy : 0.9415          \n                 95% CI : (0.9303, 0.9514)\n    No Information Rate : 0.9665          \n    P-Value [Acc > NIR] : 1               \n                                          \n                  Kappa : 0.408           \n                                          \n Mcnemar's Test P-Value : 2.806e-11       \n                                          \n            Sensitivity : 0.67164         \n            Specificity : 0.95088         \n         Pos Pred Value : 0.32143         \n         Neg Pred Value : 0.98818         \n             Prevalence : 0.03348         \n         Detection Rate : 0.02249         \n   Detection Prevalence : 0.06997         \n      Balanced Accuracy : 0.81126         \n                                          \n       'Positive' Class : Sim             \n                                          \n```\n:::\n\n```{.r .cell-code}\n# Este valor é igual a 1 - Accuracy da matriz de confusão\ncalc_erro_class(conj_teste$inadimplente, y_chapeu_bayes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.05847076\n```\n:::\n:::\n\n\n\n## LDA\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MASS)\n\ntreina_lda <- lda(inadimplente ~ balanco + estudante, data = conj_treino)\ntreina_lda\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall:\nlda(inadimplente ~ balanco + estudante, data = conj_treino)\n\nPrior probabilities of groups:\n       Nao        Sim \n0.96674584 0.03325416 \n\nGroup means:\n      balanco estudante\nNao  801.3012 0.2919953\nSim 1744.6575 0.3909774\n\nCoefficients of linear discriminants:\n                   LD1\nbalanco    0.002242096\nestudante -0.216603545\n```\n:::\n\n```{.r .cell-code}\nplot(treina_lda)\n```\n\n::: {.cell-output-display}\n![](imagens/Aula10/LDA-1.png){width=864}\n:::\n\n```{.r .cell-code}\nnames(predict(treina_lda, conj_treino))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"class\"     \"posterior\" \"x\"        \n```\n:::\n\n```{.r .cell-code}\ny_chapeu <- predict(treina_lda, conj_teste)$class %>% \n             factor(levels = levels(conj_teste$inadimplente))\nconfusionMatrix(data = y_chapeu, reference = conj_teste$inadimplente,  positive=\"Sim\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction  Nao  Sim\n       Nao 1928   45\n       Sim    6   22\n                                         \n               Accuracy : 0.9745         \n                 95% CI : (0.9666, 0.981)\n    No Information Rate : 0.9665         \n    P-Value [Acc > NIR] : 0.02354        \n                                         \n                  Kappa : 0.4523         \n                                         \n Mcnemar's Test P-Value : 1.032e-07      \n                                         \n            Sensitivity : 0.32836        \n            Specificity : 0.99690        \n         Pos Pred Value : 0.78571        \n         Neg Pred Value : 0.97719        \n             Prevalence : 0.03348        \n         Detection Rate : 0.01099        \n   Detection Prevalence : 0.01399        \n      Balanced Accuracy : 0.66263        \n                                         \n       'Positive' Class : Sim            \n                                         \n```\n:::\n\n```{.r .cell-code}\n# Este valor é igual a 1 - Accuracy da matriz de confusão\ncalc_erro_class(conj_teste$inadimplente, y_chapeu)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.02548726\n```\n:::\n:::\n\n\n## LDA - ajustes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_chapeu <- predict(treina_lda, conj_teste)$posterior\nhead(p_chapeu)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        Nao          Sim\n1 0.9804367 0.0195633263\n2 0.9996897 0.0003102714\n3 0.9998980 0.0001019950\n4 0.9877333 0.0122667438\n5 0.9989602 0.0010397555\n6 0.9994672 0.0005327889\n```\n:::\n\n```{.r .cell-code}\ny_chapeu <- ifelse(p_chapeu[, 2] > 0.11, \"Sim\", \"Nao\") %>% \n             factor(levels = levels(conj_teste$inadimplente))\nconfusionMatrix(data = y_chapeu, reference = conj_teste$inadimplente,  positive=\"Sim\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction  Nao  Sim\n       Nao 1818   19\n       Sim  116   48\n                                          \n               Accuracy : 0.9325          \n                 95% CI : (0.9206, 0.9431)\n    No Information Rate : 0.9665          \n    P-Value [Acc > NIR] : 1               \n                                          \n                  Kappa : 0.3864          \n                                          \n Mcnemar's Test P-Value : <2e-16          \n                                          \n            Sensitivity : 0.71642         \n            Specificity : 0.94002         \n         Pos Pred Value : 0.29268         \n         Neg Pred Value : 0.98966         \n             Prevalence : 0.03348         \n         Detection Rate : 0.02399         \n   Detection Prevalence : 0.08196         \n      Balanced Accuracy : 0.82822         \n                                          \n       'Positive' Class : Sim             \n                                          \n```\n:::\n\n```{.r .cell-code}\n# Este valor é igual a 1 - Accuracy da matriz de confusão\ncalc_erro_class(conj_teste$inadimplente, y_chapeu)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.06746627\n```\n:::\n:::\n\n\n\n\n## QDA\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreina_qda <- qda(inadimplente ~ balanco + estudante, data = conj_treino)\ntreina_qda\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall:\nqda(inadimplente ~ balanco + estudante, data = conj_treino)\n\nPrior probabilities of groups:\n       Nao        Sim \n0.96674584 0.03325416 \n\nGroup means:\n      balanco estudante\nNao  801.3012 0.2919953\nSim 1744.6575 0.3909774\n```\n:::\n\n```{.r .cell-code}\ny_chapeu <- predict(treina_qda, conj_teste)$class %>% \n             factor(levels = levels(conj_teste$inadimplente))\nconfusionMatrix(data = y_chapeu, reference = conj_teste$inadimplente,  positive=\"Sim\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction  Nao  Sim\n       Nao 1927   41\n       Sim    7   26\n                                          \n               Accuracy : 0.976           \n                 95% CI : (0.9683, 0.9823)\n    No Information Rate : 0.9665          \n    P-Value [Acc > NIR] : 0.008318        \n                                          \n                  Kappa : 0.5092          \n                                          \n Mcnemar's Test P-Value : 1.906e-06       \n                                          \n            Sensitivity : 0.38806         \n            Specificity : 0.99638         \n         Pos Pred Value : 0.78788         \n         Neg Pred Value : 0.97917         \n             Prevalence : 0.03348         \n         Detection Rate : 0.01299         \n   Detection Prevalence : 0.01649         \n      Balanced Accuracy : 0.69222         \n                                          \n       'Positive' Class : Sim             \n                                          \n```\n:::\n:::\n\n\n## QDA ajustes\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_chapeu <- predict(treina_qda, conj_teste)$posterior\nhead(p_chapeu)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        Nao          Sim\n1 0.9882876 1.171241e-02\n2 0.9999968 3.209822e-06\n3 0.9999998 1.848443e-07\n4 0.9946442 5.355842e-03\n5 0.9999472 5.284669e-05\n6 0.9999916 8.371285e-06\n```\n:::\n\n```{.r .cell-code}\ny_chapeu <- ifelse(p_chapeu[, 2] > 0.11, \"Sim\", \"Nao\") %>% \n             factor(levels = levels(conj_teste$inadimplente))\nconfusionMatrix(data = y_chapeu, reference = conj_teste$inadimplente,  positive=\"Sim\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction  Nao  Sim\n       Nao 1798   18\n       Sim  136   49\n                                          \n               Accuracy : 0.923           \n                 95% CI : (0.9105, 0.9343)\n    No Information Rate : 0.9665          \n    P-Value [Acc > NIR] : 1               \n                                          \n                  Kappa : 0.3573          \n                                          \n Mcnemar's Test P-Value : <2e-16          \n                                          \n            Sensitivity : 0.73134         \n            Specificity : 0.92968         \n         Pos Pred Value : 0.26486         \n         Neg Pred Value : 0.99009         \n             Prevalence : 0.03348         \n         Detection Rate : 0.02449         \n   Detection Prevalence : 0.09245         \n      Balanced Accuracy : 0.83051         \n                                          \n       'Positive' Class : Sim             \n                                          \n```\n:::\n:::\n\n\n\n## Curva ROC\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pROC)\n\n# KNN\nset.seed(21)\nctrl <- trainControl(method = \"cv\")\ntreina_knn <- train(inadimplente ~ balanco + estudante, method = \"knn\", trControl= ctrl, preProcess=c(\"center\", \"scale\"), tuneGrid = data.frame(k = seq(21,140, by=4)), data = conj_treino)\nprev_knn <- predict(treina_knn, conj_teste,type = \"prob\")\n\n# Reg Log\nmod2 <- glm(inadimplente ~ balanco + estudante,data=conj_treino,family=binomial)\np_chapeu_log <- predict(mod2, newdata = conj_teste, type = \"response\")\n\n# LDA e QDA\np_chapeu_lda <- predict(treina_lda, conj_teste)$posterior\np_chapeu_qda <- predict(treina_qda, conj_teste)$posterior\n\nroc_log <- roc(conj_teste$inadimplente ~ p_chapeu_log, plot = TRUE, print.auc=FALSE,\n                 col=\"black\", legacy.axes=TRUE)\nroc_lda <- roc(conj_teste$inadimplente ~ p_chapeu_lda[,2], plot = TRUE, print.auc=FALSE, col=\"green\", legacy.axes=TRUE, add=TRUE)\nroc_qda <- roc(conj_teste$inadimplente ~ p_chapeu_qda[,2], plot = TRUE, print.auc=FALSE, col=\"blue\", legacy.axes=TRUE, add=TRUE)\nroc_knn1 <- roc(conj_teste$inadimplente ~ prev_knn[,2], plot = TRUE, print.auc=FALSE, col=\"red\", legacy.axes=TRUE, add=TRUE)\n\nlegend(\"bottomright\",legend=c(\"Reg Log\",\"LDA\",\"QDA\", \"KNN\"), \n       col=c(\"black\", \"green\",\"blue\", \"red\"),lwd=4)\n```\n\n::: {.cell-output-display}\n![](imagens/Aula10/ROC-1.png){width=864}\n:::\n\n```{.r .cell-code}\nas.numeric(roc_log$auc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.9415487\n```\n:::\n\n```{.r .cell-code}\nas.numeric(roc_lda$auc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.9412709\n```\n:::\n\n```{.r .cell-code}\nas.numeric(roc_qda$auc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.9414715\n```\n:::\n\n```{.r .cell-code}\nas.numeric(roc_knn1$auc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.9388361\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}