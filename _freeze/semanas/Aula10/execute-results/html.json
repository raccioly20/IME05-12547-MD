{
  "hash": "a88e927be53eee67d73b564fe80088d6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"LDA e QDA\"\nauthor: \"Ricardo Accioly\"\ndate: \"2024-05-23\"\nformat:\n html:\n    code-link: true\n---\n\n\n## LDA e QDA\n\n## Carregando Bibliotecas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ISLR)\ndata(Default)\nsummary(Default)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n default    student       balance           income     \n No :9667   No :7056   Min.   :   0.0   Min.   :  772  \n Yes: 333   Yes:2944   1st Qu.: 481.7   1st Qu.:21340  \n                       Median : 823.6   Median :34553  \n                       Mean   : 835.4   Mean   :33517  \n                       3rd Qu.:1166.3   3rd Qu.:43808  \n                       Max.   :2654.3   Max.   :73554  \n```\n\n\n:::\n\n```{.r .cell-code}\nstr(Default)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t10000 obs. of  4 variables:\n $ default: Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 1 1 1 1 1 1 ...\n $ student: Factor w/ 2 levels \"No\",\"Yes\": 1 2 1 1 1 2 1 2 1 1 ...\n $ balance: num  730 817 1074 529 786 ...\n $ income : num  44362 12106 31767 35704 38463 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(Default)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  default student   balance    income\n1      No      No  729.5265 44361.625\n2      No     Yes  817.1804 12106.135\n3      No      No 1073.5492 31767.139\n4      No      No  529.2506 35704.494\n5      No      No  785.6559 38463.496\n6      No     Yes  919.5885  7491.559\n```\n\n\n:::\n:::\n\n\n## Manipulando os dados\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncredito <- tibble(Default)\nsummary(credito)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n default    student       balance           income     \n No :9667   No :7056   Min.   :   0.0   Min.   :  772  \n Yes: 333   Yes:2944   1st Qu.: 481.7   1st Qu.:21340  \n                       Median : 823.6   Median :34553  \n                       Mean   : 835.4   Mean   :33517  \n                       3rd Qu.:1166.3   3rd Qu.:43808  \n                       Max.   :2654.3   Max.   :73554  \n```\n\n\n:::\n\n```{.r .cell-code}\n# renomeando colunas\ncredito <- credito %>% \n                rename( inadimplente = default, estudante = student, balanco = balance,\n                receita = income)\ncredito <- credito %>% mutate( inadimplente =  case_when(\n                           inadimplente == \"No\"  ~ \"Nao\",\n                           inadimplente == \"Yes\" ~ \"Sim\"\n                          )) %>% mutate(inadimplente = factor(inadimplente))\ncredito <- credito %>% mutate( estudante =  case_when(\n                           estudante == \"No\"  ~ 0,\n                           estudante == \"Yes\" ~ 1\n                          )) \n\nstr(credito)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [10,000 × 4] (S3: tbl_df/tbl/data.frame)\n $ inadimplente: Factor w/ 2 levels \"Nao\",\"Sim\": 1 1 1 1 1 1 1 1 1 1 ...\n $ estudante   : num [1:10000] 0 1 0 0 0 1 0 1 0 0 ...\n $ balanco     : num [1:10000] 730 817 1074 529 786 ...\n $ receita     : num [1:10000] 44362 12106 31767 35704 38463 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(credito)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n inadimplente   estudante         balanco          receita     \n Nao:9667     Min.   :0.0000   Min.   :   0.0   Min.   :  772  \n Sim: 333     1st Qu.:0.0000   1st Qu.: 481.7   1st Qu.:21340  \n              Median :0.0000   Median : 823.6   Median :34553  \n              Mean   :0.2944   Mean   : 835.4   Mean   :33517  \n              3rd Qu.:1.0000   3rd Qu.:1166.3   3rd Qu.:43808  \n              Max.   :1.0000   Max.   :2654.3   Max.   :73554  \n```\n\n\n:::\n:::\n\n\n## Treino e Teste\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\nset.seed(2024)\ny <- credito$inadimplente\nindice_teste <- createDataPartition(y, times = 1, p = 0.2, list = FALSE)\n\nconj_treino <- credito %>% slice(-indice_teste)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Slicing with a 1-column matrix was deprecated in dplyr 1.1.0.\n```\n\n\n:::\n\n```{.r .cell-code}\nconj_teste <- credito %>% slice(indice_teste)\n\nsummary(conj_treino)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n inadimplente   estudante         balanco          receita     \n Nao:7733     Min.   :0.0000   Min.   :   0.0   Min.   :  772  \n Sim: 266     1st Qu.:0.0000   1st Qu.: 481.8   1st Qu.:21536  \n              Median :0.0000   Median : 818.0   Median :34690  \n              Mean   :0.2929   Mean   : 833.4   Mean   :33610  \n              3rd Qu.:1.0000   3rd Qu.:1164.6   3rd Qu.:43850  \n              Max.   :1.0000   Max.   :2654.3   Max.   :73554  \n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(conj_teste)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n inadimplente   estudante         balanco          receita     \n Nao:1934     Min.   :0.0000   Min.   :   0.0   Min.   : 1498  \n Sim:  67     1st Qu.:0.0000   1st Qu.: 481.6   1st Qu.:20655  \n              Median :0.0000   Median : 840.1   Median :33812  \n              Mean   :0.3003   Mean   : 843.1   Mean   :33144  \n              3rd Qu.:1.0000   3rd Qu.:1171.4   3rd Qu.:43593  \n              Max.   :1.0000   Max.   :2578.5   Max.   :68722  \n```\n\n\n:::\n:::\n\n\n## Balanço e receita\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeaturePlot(x = conj_treino[, c(\"balanco\", \"receita\")], \n            y = conj_treino$inadimplente,\n            plot = \"density\", \n            scales = list(x = list(relation = \"free\"), \n                          y = list(relation = \"free\")), \n            adjust = 1.5, \n            pch = \"|\", \n            layout = c(2, 1), \n            auto.key = list(columns = 2))\n```\n\n::: {.cell-output-display}\n![](Aula10_files/figure-html/balanco-receita-1.png){width=672}\n:::\n:::\n\n\n## Calcula Erro\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Este valor é igual a 1 - Accuracy da matriz de confusão\ncalc_erro_class <- function(real, previsto) {\n  mean(real != previsto)\n}\n```\n:::\n\n\n\n## LDA\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MASS)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAnexando pacote: 'MASS'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nO seguinte objeto é mascarado por 'package:dplyr':\n\n    select\n```\n\n\n:::\n\n```{.r .cell-code}\ntreina_lda <- lda(inadimplente ~ balanco + estudante, data = conj_treino)\ntreina_lda\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\nlda(inadimplente ~ balanco + estudante, data = conj_treino)\n\nPrior probabilities of groups:\n       Nao        Sim \n0.96674584 0.03325416 \n\nGroup means:\n      balanco estudante\nNao  802.0713 0.2903142\nSim 1745.1363 0.3684211\n\nCoefficients of linear discriminants:\n                   LD1\nbalanco    0.002260629\nestudante -0.271695654\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(treina_lda)\n```\n\n::: {.cell-output-display}\n![](Aula10_files/figure-html/LDA-1.png){width=672}\n:::\n\n```{.r .cell-code}\nnames(predict(treina_lda, conj_treino))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"class\"     \"posterior\" \"x\"        \n```\n\n\n:::\n\n```{.r .cell-code}\ny_chapeu <- predict(treina_lda, conj_teste)$class %>% \n             factor(levels = levels(conj_teste$inadimplente))\nconfusionMatrix(data = y_chapeu, reference = conj_teste$inadimplente,  positive=\"Sim\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction  Nao  Sim\n       Nao 1926   48\n       Sim    8   19\n                                          \n               Accuracy : 0.972           \n                 95% CI : (0.9638, 0.9788)\n    No Information Rate : 0.9665          \n    P-Value [Acc > NIR] : 0.09339         \n                                          \n                  Kappa : 0.3926          \n                                          \n Mcnemar's Test P-Value : 1.872e-07       \n                                          \n            Sensitivity : 0.283582        \n            Specificity : 0.995863        \n         Pos Pred Value : 0.703704        \n         Neg Pred Value : 0.975684        \n             Prevalence : 0.033483        \n         Detection Rate : 0.009495        \n   Detection Prevalence : 0.013493        \n      Balanced Accuracy : 0.639723        \n                                          \n       'Positive' Class : Sim             \n                                          \n```\n\n\n:::\n\n```{.r .cell-code}\n# Este valor é igual a 1 - Accuracy da matriz de confusão\ncalc_erro_class(conj_teste$inadimplente, y_chapeu)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.02798601\n```\n\n\n:::\n:::\n\n\n## LDA - Ajustando probabilidade limite\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_chapeu <- predict(treina_lda, conj_teste)$posterior\nhead(p_chapeu)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Nao          Sim\n1 0.9842562 1.574385e-02\n2 0.9982785 1.721546e-03\n3 0.9101929 8.980707e-02\n4 0.9989901 1.009928e-03\n5 0.9542187 4.578133e-02\n6 0.9999047 9.534759e-05\n```\n\n\n:::\n\n```{.r .cell-code}\ny_chapeu <- ifelse(p_chapeu[, 2] > 0.11, \"Sim\", \"Nao\") %>% \n             factor(levels = levels(conj_teste$inadimplente))\nconfusionMatrix(data = y_chapeu, reference = conj_teste$inadimplente,  positive=\"Sim\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction  Nao  Sim\n       Nao 1813   20\n       Sim  121   47\n                                          \n               Accuracy : 0.9295          \n                 95% CI : (0.9174, 0.9404)\n    No Information Rate : 0.9665          \n    P-Value [Acc > NIR] : 1               \n                                          \n                  Kappa : 0.3698          \n                                          \n Mcnemar's Test P-Value : <2e-16          \n                                          \n            Sensitivity : 0.70149         \n            Specificity : 0.93744         \n         Pos Pred Value : 0.27976         \n         Neg Pred Value : 0.98909         \n             Prevalence : 0.03348         \n         Detection Rate : 0.02349         \n   Detection Prevalence : 0.08396         \n      Balanced Accuracy : 0.81946         \n                                          \n       'Positive' Class : Sim             \n                                          \n```\n\n\n:::\n\n```{.r .cell-code}\n# Este valor é igual a 1 - Accuracy da matriz de confusão\ncalc_erro_class(conj_teste$inadimplente, y_chapeu)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.07046477\n```\n\n\n:::\n:::\n\n\n## QDA\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreina_qda <- qda(inadimplente ~ balanco + estudante, data = conj_treino)\ntreina_qda\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\nqda(inadimplente ~ balanco + estudante, data = conj_treino)\n\nPrior probabilities of groups:\n       Nao        Sim \n0.96674584 0.03325416 \n\nGroup means:\n      balanco estudante\nNao  802.0713 0.2903142\nSim 1745.1363 0.3684211\n```\n\n\n:::\n\n```{.r .cell-code}\ny_chapeu <- predict(treina_qda, conj_teste)$class %>% \n             factor(levels = levels(conj_teste$inadimplente))\nconfusionMatrix(data = y_chapeu, reference = conj_teste$inadimplente,  positive=\"Sim\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction  Nao  Sim\n       Nao 1923   46\n       Sim   11   21\n                                          \n               Accuracy : 0.9715          \n                 95% CI : (0.9632, 0.9784)\n    No Information Rate : 0.9665          \n    P-Value [Acc > NIR] : 0.1172          \n                                          \n                  Kappa : 0.4115          \n                                          \n Mcnemar's Test P-Value : 6.687e-06       \n                                          \n            Sensitivity : 0.31343         \n            Specificity : 0.99431         \n         Pos Pred Value : 0.65625         \n         Neg Pred Value : 0.97664         \n             Prevalence : 0.03348         \n         Detection Rate : 0.01049         \n   Detection Prevalence : 0.01599         \n      Balanced Accuracy : 0.65387         \n                                          \n       'Positive' Class : Sim             \n                                          \n```\n\n\n:::\n:::\n\n\n## QDA - Ajustando probabilidade limite\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_chapeu <- predict(treina_qda, conj_teste)$posterior\nhead(p_chapeu)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Nao          Sim\n1 0.9903235 9.676470e-03\n2 0.9997749 2.251058e-04\n3 0.8988355 1.011645e-01\n4 0.9999197 8.026470e-05\n5 0.9533307 4.666931e-02\n6 0.9999995 4.655332e-07\n```\n\n\n:::\n\n```{.r .cell-code}\ny_chapeu <- ifelse(p_chapeu[, 2] > 0.11, \"Sim\", \"Nao\") %>% \n             factor(levels = levels(conj_teste$inadimplente))\nconfusionMatrix(data = y_chapeu, reference = conj_teste$inadimplente,  positive=\"Sim\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction  Nao  Sim\n       Nao 1801   17\n       Sim  133   50\n                                          \n               Accuracy : 0.925           \n                 95% CI : (0.9126, 0.9362)\n    No Information Rate : 0.9665          \n    P-Value [Acc > NIR] : 1               \n                                          \n                  Kappa : 0.3691          \n                                          \n Mcnemar's Test P-Value : <2e-16          \n                                          \n            Sensitivity : 0.74627         \n            Specificity : 0.93123         \n         Pos Pred Value : 0.27322         \n         Neg Pred Value : 0.99065         \n             Prevalence : 0.03348         \n         Detection Rate : 0.02499         \n   Detection Prevalence : 0.09145         \n      Balanced Accuracy : 0.83875         \n                                          \n       'Positive' Class : Sim             \n                                          \n```\n\n\n:::\n:::\n\n\n## Curva ROC\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pROC)\n\n# KNN\nset.seed(21)\nctrl <- trainControl(method = \"cv\")\ntreina_knn <- train(inadimplente ~ balanco + estudante, method = \"knn\", trControl= ctrl, preProcess=c(\"center\", \"scale\"), tuneGrid = data.frame(k = seq(21,140, by=4)), data = conj_treino)\nprev_knn <- predict(treina_knn, conj_teste,type = \"prob\")\n\n# Reg Log\nmod2 <- glm(inadimplente ~ balanco + estudante,data=conj_treino,family=binomial)\np_chapeu_log <- predict(mod2, newdata = conj_teste, type = \"response\")\n\n# LDA e QDA\np_chapeu_lda <- predict(treina_lda, conj_teste)$posterior\np_chapeu_qda <- predict(treina_qda, conj_teste)$posterior\n\nroc_log <- roc(conj_teste$inadimplente ~ p_chapeu_log, plot = TRUE, print.auc=FALSE,\n                 col=\"black\", legacy.axes=TRUE)\nroc_lda <- roc(conj_teste$inadimplente ~ p_chapeu_lda[,2], plot = TRUE, print.auc=FALSE, col=\"green\", legacy.axes=TRUE, add=TRUE)\nroc_qda <- roc(conj_teste$inadimplente ~ p_chapeu_qda[,2], plot = TRUE, print.auc=FALSE, col=\"blue\", legacy.axes=TRUE, add=TRUE)\nroc_knn1 <- roc(conj_teste$inadimplente ~ prev_knn[,2], plot = TRUE, print.auc=FALSE, col=\"red\", legacy.axes=TRUE, add=TRUE)\n\nlegend(\"bottomright\",legend=c(\"Reg Log\",\"LDA\",\"QDA\", \"KNN\"), \n       col=c(\"black\", \"green\",\"blue\", \"red\"),lwd=4)\n```\n\n::: {.cell-output-display}\n![](Aula10_files/figure-html/ROC-1.png){width=864}\n:::\n\n```{.r .cell-code}\nas.numeric(roc_log$auc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9505009\n```\n\n\n:::\n\n```{.r .cell-code}\nas.numeric(roc_lda$auc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9504391\n```\n\n\n:::\n\n```{.r .cell-code}\nas.numeric(roc_qda$auc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9506089\n```\n\n\n:::\n\n```{.r .cell-code}\nas.numeric(roc_knn1$auc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9423397\n```\n\n\n:::\n:::\n",
    "supporting": [
      "Aula10_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}