{
  "hash": "11ef4c93ae4701a6308b7cb708700ebb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Arvores de Classificação - Única e GBM\"\nauthor: \"Ricardo Accioly\"\ndate: \"2024-08-20\"\nexecute: \n  echo: true\n  warning: false\n  message: false\n  freeze: auto\nformat:\n html:\n    code-link: true\n    fig-height: 10\n    fig-width: 10\n    fig-align: center\n    fig-dpi: 300\nknitr: \n  opts_chunk: \n    out.width: 90%\n    fig.showtext: true\n    collapese: true\n---\n\n\n\n\n## Bibliotecas\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ISLR)\n```\n:::\n\n\n\n\n## Dados\n\nVamos começar a aplicar a metodologia de árvores usando **árvores de classificação** para analisar os dados existentes em `Carseats`. Este conjunto de dados (simulado) é sobre venda de assentos de criança para carros. Ele tem 400 observações das seguintes variáveis (11), cujos nomes serão convertidos para o português:\n\nSales: vendas em unidades (em mil) em cada local\n\nCompPrice: preço cobrado pelo competidor em cada local\n\nIncome: nível de renda da comunidade local (em mil US\\$)\n\nAdvertising: orçamento local de propaganda (em mil US\\$)\n\nPopulation: população na região (em mil)\n\nPrice: preço cobrado pela empresa em cada local\n\nShelveLoc: um fator com níveis Ruim, Bom e Medio indicando a qualidade da localização das prateleiras para os assentos em cada lugar\n\nAge: idade media da população local\n\nEducation: nível de educação em cada local\n\nUrban: um fator Sim e Não indicando se a loja esta em uma área urbana ou rural\n\nUS: um fator indicando se a loja é nos EUA ou não\n\nNeste dados, `Sales` é a variável resposta, só que ela é uma variável contínua, por este motivo vamos usá-la para criar uma variável binária. Vamos usar a função `ifelse()` para criar a variável binária, que chamaremos de **alta**, ela assume os valores `Sim` se `Sales` for maior que 8 e assume o valor `Não` caso contrário:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(Carseats)\nsummary(Carseats)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Sales          CompPrice       Income        Advertising    \n Min.   : 0.000   Min.   : 77   Min.   : 21.00   Min.   : 0.000  \n 1st Qu.: 5.390   1st Qu.:115   1st Qu.: 42.75   1st Qu.: 0.000  \n Median : 7.490   Median :125   Median : 69.00   Median : 5.000  \n Mean   : 7.496   Mean   :125   Mean   : 68.66   Mean   : 6.635  \n 3rd Qu.: 9.320   3rd Qu.:135   3rd Qu.: 91.00   3rd Qu.:12.000  \n Max.   :16.270   Max.   :175   Max.   :120.00   Max.   :29.000  \n   Population        Price        ShelveLoc        Age          Education   \n Min.   : 10.0   Min.   : 24.0   Bad   : 96   Min.   :25.00   Min.   :10.0  \n 1st Qu.:139.0   1st Qu.:100.0   Good  : 85   1st Qu.:39.75   1st Qu.:12.0  \n Median :272.0   Median :117.0   Medium:219   Median :54.50   Median :14.0  \n Mean   :264.8   Mean   :115.8                Mean   :53.32   Mean   :13.9  \n 3rd Qu.:398.5   3rd Qu.:131.0                3rd Qu.:66.00   3rd Qu.:16.0  \n Max.   :509.0   Max.   :191.0                Max.   :80.00   Max.   :18.0  \n Urban       US     \n No :118   No :142  \n Yes:282   Yes:258  \n                    \n                    \n                    \n                    \n```\n\n\n:::\n\n```{.r .cell-code}\nstr(Carseats)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t400 obs. of  11 variables:\n $ Sales      : num  9.5 11.22 10.06 7.4 4.15 ...\n $ CompPrice  : num  138 111 113 117 141 124 115 136 132 132 ...\n $ Income     : num  73 48 35 100 64 113 105 81 110 113 ...\n $ Advertising: num  11 16 10 4 3 13 0 15 0 0 ...\n $ Population : num  276 260 269 466 340 501 45 425 108 131 ...\n $ Price      : num  120 83 80 97 128 72 108 120 124 124 ...\n $ ShelveLoc  : Factor w/ 3 levels \"Bad\",\"Good\",\"Medium\": 1 2 3 3 1 1 3 2 3 3 ...\n $ Age        : num  42 65 59 55 38 78 71 67 76 76 ...\n $ Education  : num  17 10 12 14 13 16 15 10 10 17 ...\n $ Urban      : Factor w/ 2 levels \"No\",\"Yes\": 2 2 2 2 2 1 2 2 1 1 ...\n $ US         : Factor w/ 2 levels \"No\",\"Yes\": 2 2 2 2 1 2 1 2 1 2 ...\n```\n\n\n:::\n:::\n\n\n\n\n## Manipulando os dados\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncad_crianca <- Carseats %>% rename(vendas = Sales, \n                                   preco_comp = CompPrice,\n                                   renda = Income,\n                                   propaganda = Advertising,\n                                   populacao = Population,\n                                   preco = Price,\n                                   local_prat = ShelveLoc,\n                                   idade = Age,\n                                   educacao = Education,\n                                   urbano = Urban,\n                                   eua = US)\n\ncad_crianca <- cad_crianca %>% mutate(alta = ifelse(vendas > 8, \"Sim\",\n                                                   \"Não\")) %>%\n                              mutate(alta = factor(alta))\n\ncad_crianca<- cad_crianca %>% mutate(local_prat =  case_when(\n                                      local_prat == \"Bad\"  ~ \"Ruim\",\n                                      local_prat == \"Good\" ~ \"Bom\",\n                                      local_prat == \"Medium\" ~ \"Medio\"))%>%                               mutate(local_prat = factor(local_prat))\n\ncad_crianca<- cad_crianca %>% mutate(urbano =  case_when(\n                                      urbano == \"Yes\"  ~ \"Sim\",\n                                      urbano == \"No\" ~ \"Não\")) %>%                                       mutate(urbano = factor(urbano))\n\ncad_crianca<- cad_crianca %>% mutate(eua =  case_when(\n                                      eua == \"Yes\"  ~ \"Sim\",\n                                      eua == \"No\" ~ \"Não\")) %>%                                          mutate(eua = factor(eua))\n\ncad_crianca<- cad_crianca %>% select(-vendas)\n\nstr(cad_crianca)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t400 obs. of  11 variables:\n $ preco_comp: num  138 111 113 117 141 124 115 136 132 132 ...\n $ renda     : num  73 48 35 100 64 113 105 81 110 113 ...\n $ propaganda: num  11 16 10 4 3 13 0 15 0 0 ...\n $ populacao : num  276 260 269 466 340 501 45 425 108 131 ...\n $ preco     : num  120 83 80 97 128 72 108 120 124 124 ...\n $ local_prat: Factor w/ 3 levels \"Bom\",\"Medio\",..: 3 1 2 2 3 3 2 1 2 2 ...\n $ idade     : num  42 65 59 55 38 78 71 67 76 76 ...\n $ educacao  : num  17 10 12 14 13 16 15 10 10 17 ...\n $ urbano    : Factor w/ 2 levels \"Não\",\"Sim\": 2 2 2 2 2 1 2 2 1 1 ...\n $ eua       : Factor w/ 2 levels \"Não\",\"Sim\": 2 2 2 2 1 2 1 2 1 2 ...\n $ alta      : Factor w/ 2 levels \"Não\",\"Sim\": 2 2 2 1 1 2 1 2 1 1 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(cad_crianca)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   preco_comp      renda          propaganda       populacao    \n Min.   : 77   Min.   : 21.00   Min.   : 0.000   Min.   : 10.0  \n 1st Qu.:115   1st Qu.: 42.75   1st Qu.: 0.000   1st Qu.:139.0  \n Median :125   Median : 69.00   Median : 5.000   Median :272.0  \n Mean   :125   Mean   : 68.66   Mean   : 6.635   Mean   :264.8  \n 3rd Qu.:135   3rd Qu.: 91.00   3rd Qu.:12.000   3rd Qu.:398.5  \n Max.   :175   Max.   :120.00   Max.   :29.000   Max.   :509.0  \n     preco       local_prat      idade          educacao    urbano     eua     \n Min.   : 24.0   Bom  : 85   Min.   :25.00   Min.   :10.0   Não:118   Não:142  \n 1st Qu.:100.0   Medio:219   1st Qu.:39.75   1st Qu.:12.0   Sim:282   Sim:258  \n Median :117.0   Ruim : 96   Median :54.50   Median :14.0                      \n Mean   :115.8               Mean   :53.32   Mean   :13.9                      \n 3rd Qu.:131.0               3rd Qu.:66.00   3rd Qu.:16.0                      \n Max.   :191.0               Max.   :80.00   Max.   :18.0                      \n  alta    \n Não:236  \n Sim:164  \n          \n          \n          \n          \n```\n\n\n:::\n:::\n\n\n\n\n## Treino e Teste\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\nset.seed(21)\ny <- cad_crianca$alta\nindice_teste <- createDataPartition(y, times = 1, p = 0.2, list = FALSE)\n\nconj_treino <- cad_crianca %>% slice(-indice_teste)\nconj_teste <- cad_crianca %>% slice(indice_teste)\n\nstr(conj_treino)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t319 obs. of  11 variables:\n $ preco_comp: num  138 111 113 141 124 136 132 121 117 122 ...\n $ renda     : num  73 48 35 64 113 81 110 78 94 35 ...\n $ propaganda: num  11 16 10 3 13 15 0 9 4 2 ...\n $ populacao : num  276 260 269 340 501 425 108 150 503 393 ...\n $ preco     : num  120 83 80 128 72 120 124 100 94 136 ...\n $ local_prat: Factor w/ 3 levels \"Bom\",\"Medio\",..: 3 1 2 3 3 1 2 3 1 2 ...\n $ idade     : num  42 65 59 38 78 67 76 26 50 62 ...\n $ educacao  : num  17 10 12 13 16 10 10 10 13 18 ...\n $ urbano    : Factor w/ 2 levels \"Não\",\"Sim\": 2 2 2 2 1 2 1 1 2 2 ...\n $ eua       : Factor w/ 2 levels \"Não\",\"Sim\": 2 2 2 1 2 2 1 2 2 1 ...\n $ alta      : Factor w/ 2 levels \"Não\",\"Sim\": 2 2 2 1 2 2 1 2 2 1 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nprop.table(table(conj_treino$alta))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n      Não       Sim \n0.5893417 0.4106583 \n```\n\n\n:::\n\n```{.r .cell-code}\nstr(conj_teste)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t81 obs. of  11 variables:\n $ preco_comp: num  117 115 132 115 147 145 114 121 123 103 ...\n $ renda     : num  100 105 113 28 74 119 38 41 42 93 ...\n $ propaganda: num  4 0 0 11 13 16 13 5 11 15 ...\n $ populacao : num  466 45 131 29 251 294 317 412 16 188 ...\n $ preco     : num  97 108 124 86 131 113 128 110 134 103 ...\n $ local_prat: Factor w/ 3 levels \"Bom\",\"Medio\",..: 2 2 2 1 1 3 1 2 2 3 ...\n $ idade     : num  55 71 76 53 52 42 50 54 59 74 ...\n $ educacao  : num  14 15 17 18 10 12 16 10 13 16 ...\n $ urbano    : Factor w/ 2 levels \"Não\",\"Sim\": 2 2 1 2 2 2 2 2 2 2 ...\n $ eua       : Factor w/ 2 levels \"Não\",\"Sim\": 2 1 2 2 2 2 2 2 2 2 ...\n $ alta      : Factor w/ 2 levels \"Não\",\"Sim\": 1 1 1 2 2 2 2 1 1 1 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nprop.table(table(conj_teste$alta))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n      Não       Sim \n0.5925926 0.4074074 \n```\n\n\n:::\n:::\n\n\n\n\n## Arvore de Classificação\n\nNa biblioteca rpart as arvores de classificação são obtidas usando o método class. Existem alguns controles que podem ser feitos nos parametros da arvore.\n\nNeste exemplo só definimos o menor conjunto de dados numa partição (minsplit) e o parametro de complexidade cp. Posteriormente vamos ampliar este controle. Um valor de cp muito pequeno ocasiona overfitting e um valor muito grande resulta numa arvore muito pequena (underfitting). Nos dois casos se diminui o desempenho do modelo.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##Usando rpart para desenvolver a arvore  \nlibrary(rpart)\narvcl <- rpart(alta ~ ., \n                data=conj_treino,\n                method=\"class\", #para arvore de classificação\n                control=rpart.control(minsplit=30,cp=0.02))\nplot(arvcl)\ntext(arvcl,pretty=0)\n```\n\n::: {.cell-output-display}\n![](Aula12.2_files/figure-html/unnamed-chunk-4-1.png){width=90%}\n:::\n:::\n\n\n\n\n## Regras\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Regras de Decisão\narvcl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nn= 319 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n 1) root 319 131 Não (0.58934169 0.41065831)  \n   2) local_prat=Medio,Ruim 249  77 Não (0.69076305 0.30923695)  \n     4) preco>=92 213  51 Não (0.76056338 0.23943662)  \n       8) idade>=49.5 123  15 Não (0.87804878 0.12195122) *\n       9) idade< 49.5 90  36 Não (0.60000000 0.40000000)  \n        18) preco>=124.5 44   6 Não (0.86363636 0.13636364) *\n        19) preco< 124.5 46  16 Sim (0.34782609 0.65217391) *\n     5) preco< 92 36  10 Sim (0.27777778 0.72222222)  \n      10) local_prat=Ruim 13   5 Não (0.61538462 0.38461538) *\n      11) local_prat=Medio 23   2 Sim (0.08695652 0.91304348) *\n   3) local_prat=Bom 70  16 Sim (0.22857143 0.77142857)  \n     6) preco>=142.5 10   3 Não (0.70000000 0.30000000) *\n     7) preco< 142.5 60   9 Sim (0.15000000 0.85000000) *\n```\n\n\n:::\n:::\n\n\n\n\n## Desenhando a Árvore de uma forma mais clara\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rattle)\nlibrary(rpart.plot)\nlibrary(RColorBrewer)\nfancyRpartPlot(arvcl, caption = NULL)\n```\n\n::: {.cell-output-display}\n![](Aula12.2_files/figure-html/unnamed-chunk-6-1.png){width=90%}\n:::\n:::\n\n\n\n\n## Previsões\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fazendo Previsões\ny_chapeu <- predict(arvcl, newdata = conj_teste, type=\"class\")\n\nconfusionMatrix(y_chapeu, conj_teste$alta, positive=\"Sim\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction Não Sim\n       Não  37  13\n       Sim  11  20\n                                          \n               Accuracy : 0.7037          \n                 95% CI : (0.5919, 0.8001)\n    No Information Rate : 0.5926          \n    P-Value [Acc > NIR] : 0.02573         \n                                          \n                  Kappa : 0.3805          \n                                          \n Mcnemar's Test P-Value : 0.83826         \n                                          \n            Sensitivity : 0.6061          \n            Specificity : 0.7708          \n         Pos Pred Value : 0.6452          \n         Neg Pred Value : 0.7400          \n             Prevalence : 0.4074          \n         Detection Rate : 0.2469          \n   Detection Prevalence : 0.3827          \n      Balanced Accuracy : 0.6884          \n                                          \n       'Positive' Class : Sim             \n                                          \n```\n\n\n:::\n:::\n\n\n\n\n## Arvore de Classificação no caret\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##Usando rpart para desenvolver a arvore  \nlibrary(rpart)\nset.seed(21)\n## Otimizamos o valor de cp usando um 10-fold cv\n# O parametro tuneLength diz para o algoritmo escolher diferentes valores para cp\n# O parametro tuneGrid permite decidir que valores cp deve assumir enquanto que o\n# tuneLength somente limita o número default de parametros que se usa.\ntgrid <- expand.grid(cp = seq(0.01,0.10,0.001))\nctrl <- trainControl(method = \"cv\", classProbs=TRUE)\narvclass <- train(alta ~ . , data = conj_treino, method = \"rpart\",\n                 trControl = ctrl,\n                 tuneGrid = tgrid\n                 )\n# Mostra a acurácia vs cp (parametro de complexidade)\nplot(arvclass)\n```\n\n::: {.cell-output-display}\n![](Aula12.2_files/figure-html/unnamed-chunk-8-1.png){width=90%}\n:::\n\n```{.r .cell-code}\n## Indica o melhor valor de cp\narvclass$bestTune\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     cp\n7 0.016\n```\n\n\n:::\n:::\n\n\n\n\n## Uma forma melhor de ver a Árvore\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## melhorando apresentação da árvore\nlibrary(rattle)\nlibrary(rpart.plot)\nlibrary(RColorBrewer)\nfancyRpartPlot(arvclass$finalModel, caption = NULL)\n```\n\n::: {.cell-output-display}\n![](Aula12.2_files/figure-html/unnamed-chunk-9-1.png){width=90%}\n:::\n:::\n\n\n\n\n## Previsões\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fazendo Previsões\ny_chapeu <- arvclass %>% predict(conj_teste) %>% \n                   factor(levels = levels(conj_teste$alta))\nhead(y_chapeu)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Não Não Não Sim Sim Não\nLevels: Não Sim\n```\n\n\n:::\n\n```{.r .cell-code}\nconfusionMatrix(y_chapeu, conj_teste$alta, positive=\"Sim\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction Não Sim\n       Não  40  13\n       Sim   8  20\n                                          \n               Accuracy : 0.7407          \n                 95% CI : (0.6314, 0.8318)\n    No Information Rate : 0.5926          \n    P-Value [Acc > NIR] : 0.003896        \n                                          \n                  Kappa : 0.45            \n                                          \n Mcnemar's Test P-Value : 0.382733        \n                                          \n            Sensitivity : 0.6061          \n            Specificity : 0.8333          \n         Pos Pred Value : 0.7143          \n         Neg Pred Value : 0.7547          \n             Prevalence : 0.4074          \n         Detection Rate : 0.2469          \n   Detection Prevalence : 0.3457          \n      Balanced Accuracy : 0.7197          \n                                          \n       'Positive' Class : Sim             \n                                          \n```\n\n\n:::\n:::\n\n\n\n\n## Verificando a consistencia dos resultados\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(121)\ny <- cad_crianca$alta\nindice_teste <- createDataPartition(y, times = 1, p = 0.2, list = FALSE)\n\nconj_treino <- cad_crianca %>% slice(-indice_teste)\nconj_teste <- cad_crianca %>% slice(indice_teste)\n\nstr(conj_treino)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t319 obs. of  11 variables:\n $ preco_comp: num  138 113 141 124 115 136 132 121 117 115 ...\n $ renda     : num  73 35 64 113 105 81 113 78 94 28 ...\n $ propaganda: num  11 10 3 13 0 15 0 9 4 11 ...\n $ populacao : num  276 269 340 501 45 425 131 150 503 29 ...\n $ preco     : num  120 80 128 72 108 120 124 100 94 86 ...\n $ local_prat: Factor w/ 3 levels \"Bom\",\"Medio\",..: 3 2 3 3 2 1 2 3 1 1 ...\n $ idade     : num  42 59 38 78 71 67 76 26 50 53 ...\n $ educacao  : num  17 12 13 16 15 10 17 10 13 18 ...\n $ urbano    : Factor w/ 2 levels \"Não\",\"Sim\": 2 2 2 1 2 2 1 1 2 2 ...\n $ eua       : Factor w/ 2 levels \"Não\",\"Sim\": 2 2 1 2 1 2 2 2 2 2 ...\n $ alta      : Factor w/ 2 levels \"Não\",\"Sim\": 2 2 1 2 1 2 1 2 2 2 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nprop.table(table(conj_treino$alta))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n      Não       Sim \n0.5893417 0.4106583 \n```\n\n\n:::\n\n```{.r .cell-code}\nstr(conj_teste)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t81 obs. of  11 variables:\n $ preco_comp: num  111 117 132 122 125 139 103 125 122 121 ...\n $ renda     : num  48 100 110 35 90 32 74 94 76 90 ...\n $ propaganda: num  16 4 0 2 2 0 0 0 0 0 ...\n $ populacao : num  260 466 108 393 367 176 359 447 270 150 ...\n $ preco     : num  83 97 124 136 131 82 97 89 100 108 ...\n $ local_prat: Factor w/ 3 levels \"Bom\",\"Medio\",..: 1 2 2 2 2 1 3 1 1 3 ...\n $ idade     : num  65 55 76 62 35 54 55 30 60 75 ...\n $ educacao  : num  10 14 10 18 18 11 11 12 18 16 ...\n $ urbano    : Factor w/ 2 levels \"Não\",\"Sim\": 2 2 1 2 2 1 2 2 1 2 ...\n $ eua       : Factor w/ 2 levels \"Não\",\"Sim\": 2 2 1 1 2 1 2 1 1 1 ...\n $ alta      : Factor w/ 2 levels \"Não\",\"Sim\": 2 1 1 1 1 2 1 2 2 1 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nprop.table(table(conj_teste$alta))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n      Não       Sim \n0.5925926 0.4074074 \n```\n\n\n:::\n:::\n\n\n\n\n## Obtendo a arvore\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##Usando rpart para desenvolver a arvore  \nlibrary(rpart)\narvcl <- rpart(alta ~ ., \n                data=conj_treino,\n                method=\"class\", #para arvore de classificação\n                control=rpart.control(minsplit=30,cp=0.02))\n```\n:::\n\n\n\n\n## Desenhando a Árvore de uma forma mais clara\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rattle)\nlibrary(rpart.plot)\nlibrary(RColorBrewer)\nfancyRpartPlot(arvcl, caption = NULL)\n```\n\n::: {.cell-output-display}\n![](Aula12.2_files/figure-html/unnamed-chunk-13-1.png){width=90%}\n:::\n:::\n\n\n\n\n## GBM\n\n### Criando um grid para avaliar os parametros\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhiper_grid <- expand.grid(\n  shrinkage = c(.001, .01, .1),\n  interaction.depth = c(1, 3, 5),\n  n.minobsinnode = c(5, 10, 15),\n  bag.fraction = c(.65, 1),\n  optimal_trees = 0, # um lugar para guardar resultados\n  min_erro = 0   # um lugar para guardar resultados\n  )\n\n# número total de combinações\nnrow(hiper_grid)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 54\n```\n\n\n:::\n:::\n\n\n\n\n## Avaliando o grid de parametros\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gbm)\nconj_treino$alta <- as.numeric(conj_treino$alta)\nconj_treino <- transform(conj_treino, alta=alta - 1)\nconj_treino$eua <- as.numeric(conj_treino$eua)\nconj_treino <- transform(conj_treino, eua=eua - 1)\nconj_treino$local_prat <- as.numeric(conj_treino$local_prat)\nconj_treino <- transform(conj_treino, local_prat=local_prat - 1)\n\n\n#Busca no grid\nfor(i in 1:nrow(hiper_grid)) {\n\n  #\n  set.seed(21)\n\n  # treina o modelo\n  gbm.tune <- gbm(\n    formula = alta ~ .,\n    distribution = \"bernoulli\",\n    data = conj_treino,\n    n.trees = 5000,\n    interaction.depth = hiper_grid$interaction.depth[i],\n    shrinkage = hiper_grid$shrinkage[i],\n    n.minobsinnode = hiper_grid$n.minobsinnode[i],\n    bag.fraction = hiper_grid$bag.fraction[i],\n    train.fraction = .75,\n    n.cores = NULL,\n    verbose = FALSE\n  )\n\n  # adiciona os erros de treino e arvores ao grid\n  hiper_grid$optimal_trees[i] <- which.min(gbm.tune$valid.error)\n  hiper_grid$min_erro[i] <- min(gbm.tune$valid.error)\n}\n\nhiper_grid %>% dplyr::arrange(min_erro) %>% head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   shrinkage interaction.depth n.minobsinnode bag.fraction optimal_trees\n1       0.10                 3              5         0.65           165\n2       0.01                 1             10         0.65          3778\n3       0.10                 1             10         0.65           409\n4       0.01                 1              5         0.65          3577\n5       0.10                 1             15         0.65           295\n6       0.01                 1             15         0.65          3555\n7       0.10                 1              5         0.65           322\n8       0.10                 5              5         0.65           134\n9       0.01                 3              5         0.65          1515\n10      0.01                 3             10         0.65          1525\n    min_erro\n1  0.5223560\n2  0.5265243\n3  0.5273196\n4  0.5292021\n5  0.5311457\n6  0.5364523\n7  0.5377417\n8  0.5453332\n9  0.5509056\n10 0.5576744\n```\n\n\n:::\n:::\n\n\n\n\n## Modelo final\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# \nset.seed(21)\n\n# treina o modelo GBM\ngbm.fit.final <- gbm(\n  formula = alta ~ .,\n  distribution = \"bernoulli\",\n  data = conj_treino,\n  n.trees = 165,\n  interaction.depth = 3,\n  shrinkage = 0.10,\n  n.minobsinnode = 5,\n  bag.fraction = 0.65, \n  train.fraction = 1,\n  n.cores = NULL, \n  verbose = FALSE\n  )  \n```\n:::\n\n\n\n\n## Importância das Variáveis\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mai = c(1, 2, 1, 2))\nsummary(\n  gbm.fit.final, \n  cBars = 10,\n  method = relative.influence, # também pode ser usado permutation.test.gbm\n  las = 2\n  )\n```\n\n::: {.cell-output-display}\n![](Aula12.2_files/figure-html/unnamed-chunk-17-1.png){width=90%}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  var    rel.inf\npreco           preco 29.5468476\nlocal_prat local_prat 21.5292204\npropaganda propaganda 12.2498142\nrenda           renda 11.4616394\nidade           idade 10.3960594\npreco_comp preco_comp 10.1224807\npopulacao   populacao  2.0513691\neua               eua  1.2347441\neducacao     educacao  1.1121800\nurbano         urbano  0.2956451\n```\n\n\n:::\n:::\n\n\n\n\n## Previsão\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconj_teste$alta <- as.numeric(conj_teste$alta)\nconj_teste <- transform(conj_teste, alta=alta - 1)\nconj_teste$eua <- as.numeric(conj_teste$eua)\nconj_teste <- transform(conj_teste, eua=eua - 1)\nconj_teste$local_prat <- as.numeric(conj_teste$local_prat)\nconj_teste <- transform(conj_teste, local_prat=local_prat - 1)\n\n# Fazendo Previsões\nprevisao1 <- predict(gbm.fit.final, \n                     newdata = conj_teste,\n                     n.trees=gbm.fit.final$n.trees,\n                     type = \"response\")\nhead(previsao1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.965002359 0.784188568 0.176077409 0.003460984 0.027812237 0.995643378\n```\n\n\n:::\n\n```{.r .cell-code}\ngbm.ychapeu <- as.factor(ifelse(previsao1 < 0.5,0,1))\n \nconfusionMatrix(gbm.ychapeu,as.factor(conj_teste$alta), positive=\"1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction  0  1\n         0 37  6\n         1 11 27\n                                          \n               Accuracy : 0.7901          \n                 95% CI : (0.6854, 0.8727)\n    No Information Rate : 0.5926          \n    P-Value [Acc > NIR] : 0.0001359       \n                                          \n                  Kappa : 0.5754          \n                                          \n Mcnemar's Test P-Value : 0.3319755       \n                                          \n            Sensitivity : 0.8182          \n            Specificity : 0.7708          \n         Pos Pred Value : 0.7105          \n         Neg Pred Value : 0.8605          \n             Prevalence : 0.4074          \n         Detection Rate : 0.3333          \n   Detection Prevalence : 0.4691          \n      Balanced Accuracy : 0.7945          \n                                          \n       'Positive' Class : 1               \n                                          \n```\n\n\n:::\n:::\n\n\n\n\n## Curva ROC\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pROC)\np_chapeu_gbm <- previsao1\nroc_gbm <- roc(conj_teste$alta ~ p_chapeu_gbm, plot = TRUE, print.auc=FALSE, col=\"black\", legacy.axes=TRUE)\n```\n\n::: {.cell-output-display}\n![](Aula12.2_files/figure-html/unnamed-chunk-19-1.png){width=90%}\n:::\n\n```{.r .cell-code}\nas.numeric(roc_gbm$auc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9034091\n```\n\n\n:::\n:::\n",
    "supporting": [
      "Aula12.2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}