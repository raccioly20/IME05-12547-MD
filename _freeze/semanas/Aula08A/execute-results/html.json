{
  "hash": "ad6739c040b46a6178bc0f77ce62dece",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"KNN com Tidymodels\"\nauthor: \"Ricardo Accioly\"\ndate: \"2024-12-04\"\nformat:\n html:\n    code-link: true\n    fig-width: 9\n    fig-height: 7\n    fig-dpi: 300\nknitr:\n  opts_chunk: \n    out.width: 90%\n    comment: \"#>\"\nexecute: \n  echo: true\n  warning: false\n  message: false\n  freeze: auto\n---\n\n\n\n\n\n## KNN\n\n**Vamos ver como seria utilizar o KNN a partir do tidymodels**\n\n## Carregando Bibliotecas\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ISLR)\ndata(Default)\nsummary(Default)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  default    student       balance           income     \n#>  No :9667   No :7056   Min.   :   0.0   Min.   :  772  \n#>  Yes: 333   Yes:2944   1st Qu.: 481.7   1st Qu.:21340  \n#>                        Median : 823.6   Median :34553  \n#>                        Mean   : 835.4   Mean   :33517  \n#>                        3rd Qu.:1166.3   3rd Qu.:43808  \n#>                        Max.   :2654.3   Max.   :73554\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(Default)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> 'data.frame':\t10000 obs. of  4 variables:\n#>  $ default: Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 1 1 1 1 1 1 ...\n#>  $ student: Factor w/ 2 levels \"No\",\"Yes\": 1 2 1 1 1 2 1 2 1 1 ...\n#>  $ balance: num  730 817 1074 529 786 ...\n#>  $ income : num  44362 12106 31767 35704 38463 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(Default)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>   default student   balance    income\n#> 1      No      No  729.5265 44361.625\n#> 2      No     Yes  817.1804 12106.135\n#> 3      No      No 1073.5492 31767.139\n#> 4      No      No  529.2506 35704.494\n#> 5      No      No  785.6559 38463.496\n#> 6      No     Yes  919.5885  7491.559\n```\n\n\n:::\n:::\n\n\n\n\n\n## Manipulando os dados\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncredito <- tibble(Default)\nsummary(credito)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  default    student       balance           income     \n#>  No :9667   No :7056   Min.   :   0.0   Min.   :  772  \n#>  Yes: 333   Yes:2944   1st Qu.: 481.7   1st Qu.:21340  \n#>                        Median : 823.6   Median :34553  \n#>                        Mean   : 835.4   Mean   :33517  \n#>                        3rd Qu.:1166.3   3rd Qu.:43808  \n#>                        Max.   :2654.3   Max.   :73554\n```\n\n\n:::\n\n```{.r .cell-code}\n# renomeando colunas\ncredito <- credito %>% \n                rename( inadimplente = default, estudante = student, balanco = balance,\n                receita = income)\ncredito <- credito %>% mutate( inadimplente =  case_when(\n                           inadimplente == \"No\"  ~ \"Nao\",\n                           inadimplente == \"Yes\" ~ \"Sim\"\n                          )) %>% mutate(inadimplente = factor(inadimplente))\ncredito <- credito %>% mutate( estudante =  case_when(\n                           estudante == \"No\"  ~ 0,\n                           estudante == \"Yes\" ~ 1\n                          )) \n\nstr(credito)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> tibble [10,000 × 4] (S3: tbl_df/tbl/data.frame)\n#>  $ inadimplente: Factor w/ 2 levels \"Nao\",\"Sim\": 1 1 1 1 1 1 1 1 1 1 ...\n#>  $ estudante   : num [1:10000] 0 1 0 0 0 1 0 1 0 0 ...\n#>  $ balanco     : num [1:10000] 730 817 1074 529 786 ...\n#>  $ receita     : num [1:10000] 44362 12106 31767 35704 38463 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(credito)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  inadimplente   estudante         balanco          receita     \n#>  Nao:9667     Min.   :0.0000   Min.   :   0.0   Min.   :  772  \n#>  Sim: 333     1st Qu.:0.0000   1st Qu.: 481.7   1st Qu.:21340  \n#>               Median :0.0000   Median : 823.6   Median :34553  \n#>               Mean   :0.2944   Mean   : 835.4   Mean   :33517  \n#>               3rd Qu.:1.0000   3rd Qu.:1166.3   3rd Qu.:43808  \n#>               Max.   :1.0000   Max.   :2654.3   Max.   :73554\n```\n\n\n:::\n:::\n\n\n\n\n\n## KNN\n\n**O KNN é um algoritmo de classificação que se baseia na distância entre os pontos.**\n**Como o KNN usa as distancias entre os pontos ele é afetado pela escala dos dados, portanto, é necessário que os dados sejam normalizados (padronizados) para eliminar este efeito.**\n\nQuando temos diversas variáveis explicativas em diferentes escalas, em geral, elas devem ser transformadas para ter media zero e desvio padrão 1\n\n## Criando conjuntos de treino e teste\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nset.seed(2024)\ncredito_split <- initial_split(prop = 0.80, strata = inadimplente, data = credito)\n\nconj_treino <- training(credito_split)\nconj_teste <- testing(credito_split)\n```\n:::\n\n\n\n\n\n##\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Validação Cruzada\nset.seed(2024)\ndf_cv <- vfold_cv(conj_treino, v = 5)\ndf_cv\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> #  5-fold cross-validation \n#> # A tibble: 5 × 2\n#>   splits              id   \n#>   <list>              <chr>\n#> 1 <split [6400/1600]> Fold1\n#> 2 <split [6400/1600]> Fold2\n#> 3 <split [6400/1600]> Fold3\n#> 4 <split [6400/1600]> Fold4\n#> 5 <split [6400/1600]> Fold5\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_knn <- nearest_neighbor(neighbors = tune()) %>% \n            set_engine(\"kknn\") %>%\n            set_mode(\"classification\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_knn_recipe <- recipe(inadimplente ~ estudante + balanco + receita, data = conj_treino) %>%  step_normalize(all_predictors())\nmod_knn_recipe %>% prep()\nmod_knn_recipe %>% prep() %>% bake(new_data = NULL)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 8,000 × 4\n#>    estudante balanco receita inadimplente\n#>        <dbl>   <dbl>   <dbl> <fct>       \n#>  1    -0.649 -0.219    0.819 Nao         \n#>  2    -0.649  0.491   -0.127 Nao         \n#>  3    -0.649 -0.631    0.169 Nao         \n#>  4    -0.649 -0.103    0.376 Nao         \n#>  5     1.54   0.173   -1.95  Nao         \n#>  6    -0.649 -0.0207  -0.642 Nao         \n#>  7     1.54  -0.0554  -1.19  Nao         \n#>  8    -0.649 -1.72    -0.314 Nao         \n#>  9     1.54  -1.72    -0.870 Nao         \n#> 10     1.54   0.794   -1.52  Nao         \n#> # ℹ 7,990 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_knn_workflow <- workflow() %>% \n  add_recipe(mod_knn_recipe) %>% \n  add_model(mod_knn)\nmod_knn_workflow\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> ══ Workflow ════════════════════════════════════════════════════════════════════\n#> Preprocessor: Recipe\n#> Model: nearest_neighbor()\n#> \n#> ── Preprocessor ────────────────────────────────────────────────────────────────\n#> 1 Recipe Step\n#> \n#> • step_normalize()\n#> \n#> ── Model ───────────────────────────────────────────────────────────────────────\n#> K-Nearest Neighbor Model Specification (classification)\n#> \n#> Main Arguments:\n#>   neighbors = tune()\n#> \n#> Computational engine: kknn\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nknn_tune_grid <- tibble(neighbors = c(10, 15, 25, 45, 60, 80, 100, 120, 140, 180, 200))\nctrl <- control_resamples(save_pred = TRUE)\nmod_knn_tune <- mod_knn_workflow %>% tune_grid(resamples = df_cv, \n               grid = knn_tune_grid, \n               control = ctrl)\nmod_knn_tune\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # Tuning results\n#> # 5-fold cross-validation \n#> # A tibble: 5 × 5\n#>   splits              id    .metrics          .notes           .predictions\n#>   <list>              <chr> <list>            <list>           <list>      \n#> 1 <split [6400/1600]> Fold1 <tibble [33 × 5]> <tibble [0 × 3]> <tibble>    \n#> 2 <split [6400/1600]> Fold2 <tibble [33 × 5]> <tibble [0 × 3]> <tibble>    \n#> 3 <split [6400/1600]> Fold3 <tibble [33 × 5]> <tibble [0 × 3]> <tibble>    \n#> 4 <split [6400/1600]> Fold4 <tibble [33 × 5]> <tibble [0 × 3]> <tibble>    \n#> 5 <split [6400/1600]> Fold5 <tibble [33 × 5]> <tibble [0 × 3]> <tibble>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_knn_tune %>% collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 33 × 7\n#>    neighbors .metric     .estimator   mean     n std_err .config              \n#>        <dbl> <chr>       <chr>       <dbl> <int>   <dbl> <chr>                \n#>  1        10 accuracy    binary     0.970      5 0.00250 Preprocessor1_Model01\n#>  2        10 brier_class binary     0.0244     5 0.00155 Preprocessor1_Model01\n#>  3        10 roc_auc     binary     0.849      5 0.0123  Preprocessor1_Model01\n#>  4        15 accuracy    binary     0.972      5 0.00212 Preprocessor1_Model02\n#>  5        15 brier_class binary     0.0232     5 0.00148 Preprocessor1_Model02\n#>  6        15 roc_auc     binary     0.866      5 0.0117  Preprocessor1_Model02\n#>  7        25 accuracy    binary     0.974      5 0.00192 Preprocessor1_Model03\n#>  8        25 brier_class binary     0.0223     5 0.00138 Preprocessor1_Model03\n#>  9        25 roc_auc     binary     0.899      5 0.0126  Preprocessor1_Model03\n#> 10        45 accuracy    binary     0.974      5 0.00166 Preprocessor1_Model04\n#> # ℹ 23 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmelhor_k <- mod_knn_tune %>% select_best()\nmod_knn_final <- mod_knn_workflow %>% finalize_workflow(melhor_k)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresultados_knn <- mod_knn_final %>% fit(data = conj_treino) %>% \n  predict(new_data = conj_teste) %>% bind_cols(conj_teste) %>% \n  metrics(truth = inadimplente, estimate = .pred_class)\n```\n:::\n",
    "supporting": [
      "Aula08A_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}