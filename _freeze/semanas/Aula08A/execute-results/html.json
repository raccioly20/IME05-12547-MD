{
  "hash": "bf68d2c621efa7a6488821f8cd2ac352",
  "result": {
    "markdown": "---\ntitle: \"KNN\"\nauthor: \"Ricardo Accioly\"\ndate: \"2023-09-29\"\nformat:\n html:\n    code-link: true\n    fig-width: 9\n    fig-height: 7\n    fig-dpi: 300\nknitr:\n  opts_chunk: \n    out.width: 90%\n    comment: \"#>\"\n---\n\n\n## KNN\n\n**O KNN é um algoritmo muito simples no qual cada observação é prevista com base em sua \"semelhança\" com outras observações. Ao contrário da maioria dos métodos, KNN é um algoritmo baseado na memória e não pode ser resumido por um modelo de forma fechada. Isso significa que as amostras de treinamento são necessárias no tempo de execução e as previsões são feitas diretamente das relações amostrais. Consequentemente, os KNNs também são conhecidos como aprendizes preguiçosos**\n\n## Carregando Bibliotecas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ISLR)\ndata(Default)\nsummary(Default)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  default    student       balance           income     \n#>  No :9667   No :7056   Min.   :   0.0   Min.   :  772  \n#>  Yes: 333   Yes:2944   1st Qu.: 481.7   1st Qu.:21340  \n#>                        Median : 823.6   Median :34553  \n#>                        Mean   : 835.4   Mean   :33517  \n#>                        3rd Qu.:1166.3   3rd Qu.:43808  \n#>                        Max.   :2654.3   Max.   :73554\n```\n:::\n\n```{.r .cell-code}\nstr(Default)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 'data.frame':\t10000 obs. of  4 variables:\n#>  $ default: Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 1 1 1 1 1 1 ...\n#>  $ student: Factor w/ 2 levels \"No\",\"Yes\": 1 2 1 1 1 2 1 2 1 1 ...\n#>  $ balance: num  730 817 1074 529 786 ...\n#>  $ income : num  44362 12106 31767 35704 38463 ...\n```\n:::\n\n```{.r .cell-code}\nhead(Default)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   default student   balance    income\n#> 1      No      No  729.5265 44361.625\n#> 2      No     Yes  817.1804 12106.135\n#> 3      No      No 1073.5492 31767.139\n#> 4      No      No  529.2506 35704.494\n#> 5      No      No  785.6559 38463.496\n#> 6      No     Yes  919.5885  7491.559\n```\n:::\n:::\n\n\n## Manipulando os dados\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncredito <- tibble(Default)\nsummary(credito)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  default    student       balance           income     \n#>  No :9667   No :7056   Min.   :   0.0   Min.   :  772  \n#>  Yes: 333   Yes:2944   1st Qu.: 481.7   1st Qu.:21340  \n#>                        Median : 823.6   Median :34553  \n#>                        Mean   : 835.4   Mean   :33517  \n#>                        3rd Qu.:1166.3   3rd Qu.:43808  \n#>                        Max.   :2654.3   Max.   :73554\n```\n:::\n\n```{.r .cell-code}\n# renomeando colunas\ncredito <- credito %>% \n                rename( inadimplente = default, estudante = student, balanco = balance,\n                receita = income)\ncredito <- credito %>% mutate( inadimplente =  case_when(\n                           inadimplente == \"No\"  ~ \"Nao\",\n                           inadimplente == \"Yes\" ~ \"Sim\"\n                          )) %>% mutate(inadimplente = factor(inadimplente))\ncredito <- credito %>% mutate( estudante =  case_when(\n                           estudante == \"No\"  ~ \"Nao\",\n                           estudante == \"Yes\" ~ \"Sim\"\n                          )) %>% mutate(estudante = factor(estudante))\n\nstr(credito)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> tibble [10,000 × 4] (S3: tbl_df/tbl/data.frame)\n#>  $ inadimplente: Factor w/ 2 levels \"Nao\",\"Sim\": 1 1 1 1 1 1 1 1 1 1 ...\n#>  $ estudante   : Factor w/ 2 levels \"Nao\",\"Sim\": 1 2 1 1 1 2 1 2 1 1 ...\n#>  $ balanco     : num [1:10000] 730 817 1074 529 786 ...\n#>  $ receita     : num [1:10000] 44362 12106 31767 35704 38463 ...\n```\n:::\n\n```{.r .cell-code}\nsummary(credito)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  inadimplente estudante     balanco          receita     \n#>  Nao:9667     Nao:7056   Min.   :   0.0   Min.   :  772  \n#>  Sim: 333     Sim:2944   1st Qu.: 481.7   1st Qu.:21340  \n#>                          Median : 823.6   Median :34553  \n#>                          Mean   : 835.4   Mean   :33517  \n#>                          3rd Qu.:1166.3   3rd Qu.:43808  \n#>                          Max.   :2654.3   Max.   :73554\n```\n:::\n:::\n\n\n## Criando o conjunto de Treino e Teste\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nset.seed(23)\n\n# Criando um conjunto de treino e teste\ncredito_split <- initial_split(credito, prop = 0.75, strata = inadimplente)\ncredito_split\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> <Training/Testing/Total>\n#> <7500/2500/10000>\n```\n:::\n:::\n\n\n## Separando os conjuntos\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Separando os dos conjuntos\nconj_treino <- training(credito_split)\nconj_teste <- testing(credito_split)\n\nsummary(conj_treino)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  inadimplente estudante     balanco          receita     \n#>  Nao:7247     Nao:5275   Min.   :   0.0   Min.   :  772  \n#>  Sim: 253     Sim:2225   1st Qu.: 485.4   1st Qu.:21199  \n#>                          Median : 825.9   Median :34679  \n#>                          Mean   : 839.1   Mean   :33501  \n#>                          3rd Qu.:1169.2   3rd Qu.:43836  \n#>                          Max.   :2654.3   Max.   :73554\n```\n:::\n\n```{.r .cell-code}\nsummary(conj_teste)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  inadimplente estudante     balanco          receita     \n#>  Nao:2420     Nao:1781   Min.   :   0.0   Min.   : 2981  \n#>  Sim:  80     Sim: 719   1st Qu.: 467.9   1st Qu.:21833  \n#>                          Median : 815.6   Median :34036  \n#>                          Mean   : 824.2   Mean   :33565  \n#>                          3rd Qu.:1156.2   3rd Qu.:43721  \n#>                          Max.   :2578.5   Max.   :71879\n```\n:::\n:::\n\n\n## Definindo o modelo\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Definindo o modelo\nknn_modelo <- nearest_neighbor() %>% \n  # Definindo a rotina do knn\n  set_engine('kknn') %>% \n  # Definindo o tipo de modelo supervisionado\n  set_mode('classification')\n```\n:::\n\n\n## No KNN é necessária normalização\n\nVamos precisar criar uma receita para transformação dos dados!\n\nAlém disso precisamos transformar estudante em numérico, mas devemos mudar a variável resposta!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Especificando transformação de variáveis\nknn_tr_rec <- recipe(inadimplente ~ .,data = conj_treino) %>%\n  # Adiciona normalização\n  step_normalize(all_numeric()) %>%\n  # Adiciona variável dummy\n  step_dummy(all_nominal(), -all_outcomes())\n# Vendo as receitas\nknn_tr_rec %>% summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 4 × 4\n#>   variable     type      role      source  \n#>   <chr>        <list>    <chr>     <chr>   \n#> 1 estudante    <chr [3]> predictor original\n#> 2 balanco      <chr [2]> predictor original\n#> 3 receita      <chr [2]> predictor original\n#> 4 inadimplente <chr [3]> outcome   original\n```\n:::\n:::\n\n\n## Preparando a receita com os dados de treino\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknn_tr_rec_prep <- knn_tr_rec %>% prep(training = conj_treino)\n\n# Vendo o resultado do treino\nknn_tr_rec_prep\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Recipe ──────────────────────────────────────────────────────────────────────\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Inputs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Number of variables by role\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> outcome:   1\n#> predictor: 3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Training information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Training data contained 7500 data points and no incomplete rows.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Operations\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> • Centering and scaling for: balanco, receita | Trained\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> • Dummy variables from: estudante | Trained\n```\n:::\n:::\n\n\n## Aplicando aos dados de treinamento\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconj_treino_prep <- knn_tr_rec_prep %>% \n  bake(new_data = NULL)\nconj_treino_prep\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 7,500 × 4\n#>    balanco receita inadimplente estudante_Sim\n#>      <dbl>   <dbl> <fct>                <dbl>\n#>  1 -0.226    0.814 Nao                      0\n#>  2 -0.0453  -1.60  Nao                      1\n#>  3  0.485   -0.130 Nao                      0\n#>  4 -0.640    0.165 Nao                      0\n#>  5 -0.110    0.372 Nao                      0\n#>  6  0.166   -1.95  Nao                      1\n#>  7 -0.0281  -0.644 Nao                      0\n#>  8 -0.0629  -1.19  Nao                      1\n#>  9 -1.73    -0.871 Nao                      1\n#> 10  0.788   -1.52  Nao                      1\n#> # ℹ 7,490 more rows\n```\n:::\n:::\n\n\n## Aplicando aos dados de teste\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconj_teste_prep <- knn_tr_rec_prep %>% \n  bake(new_data = conj_teste)\nconj_teste_prep\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 2,500 × 4\n#>    balanco receita inadimplente estudante_Sim\n#>      <dbl>   <dbl> <fct>                <dbl>\n#>  1   0.665  0.297  Nao                      0\n#>  2  -1.73  -0.317  Nao                      0\n#>  3  -1.24  -0.393  Nao                      0\n#>  4  -0.480  0.861  Nao                      0\n#>  5  -1.14   0.865  Nao                      0\n#>  6  -1.73   1.26   Nao                      0\n#>  7  -1.26   1.27   Nao                      0\n#>  8   0.238 -0.0782 Nao                      0\n#>  9  -0.407 -0.227  Nao                      0\n#> 10  -0.405  0.597  Nao                      0\n#> # ℹ 2,490 more rows\n```\n:::\n:::\n\n\n## Treinando o modelo com o conjunto de treino transformado\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknn_ajustado <- knn_modelo %>%\n  fit(inadimplente ~., data = conj_treino_prep)\n```\n:::\n\n\n## Obtendo as previsões e as métrica de desempenho\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Obtendo as previsões de classes\nclass_prev <- predict(knn_ajustado, new_data = conj_teste_prep,\n                       type = 'class')\n\n# Obtendo as probabilidades previstas\nprob_prev <- predict(knn_ajustado, new_data=conj_teste_prep, \n                      type='prob')\n\n# Combinando os resultados de teste\ncredito_resultados <- conj_teste_prep %>% \n  select(inadimplente) %>% \n  bind_cols(class_prev, prob_prev)\n\nhead(credito_resultados)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 6 × 4\n#>   inadimplente .pred_class .pred_Nao .pred_Sim\n#>   <fct>        <fct>           <dbl>     <dbl>\n#> 1 Nao          Nao                 1         0\n#> 2 Nao          Nao                 1         0\n#> 3 Nao          Nao                 1         0\n#> 4 Nao          Nao                 1         0\n#> 5 Nao          Nao                 1         0\n#> 6 Nao          Nao                 1         0\n```\n:::\n\n```{.r .cell-code}\n# Gerar a matriz de confusão\ncredito_resultados %>% \n  conf_mat(truth = inadimplente, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>           Truth\n#> Prediction  Nao  Sim\n#>        Nao 2396   50\n#>        Sim   24   30\n```\n:::\n\n```{.r .cell-code}\n# Calculando sensibilidade\ncredito_resultados %>% \n  sens(truth = inadimplente, estimate = .pred_class,\n       event_level = \"second\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 1 × 3\n#>   .metric .estimator .estimate\n#>   <chr>   <chr>          <dbl>\n#> 1 sens    binary         0.375\n```\n:::\n\n```{.r .cell-code}\n# Calculando especificidade\ncredito_resultados %>% \n  spec(truth = inadimplente, estimate = .pred_class,\n       event_level = \"second\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 1 × 3\n#>   .metric .estimator .estimate\n#>   <chr>   <chr>          <dbl>\n#> 1 spec    binary         0.990\n```\n:::\n\n```{.r .cell-code}\n# Gerar curva ROC\ncredito_resultados %>% \n  roc_curve(truth = inadimplente, .pred_Sim, event_level = \"second\") %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](Aula08A_files/figure-html/unnamed-chunk-8-1.png){width=90%}\n:::\n\n```{.r .cell-code}\n# Area embaixo da curva\ncredito_resultados %>% \n  roc_auc(truth = inadimplente, .pred_Sim, event_level = \"second\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 1 × 3\n#>   .metric .estimator .estimate\n#>   <chr>   <chr>          <dbl>\n#> 1 roc_auc binary         0.806\n```\n:::\n:::\n\n\n## Criando um fluxo de trabalho para o modelo\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncredito_knn_fluxo <- workflow() %>% \n  # Incluindo o tipo de modelo\n  add_model(knn_modelo) %>%\n  # Incluindo receita de transformação\n  add_recipe(knn_tr_rec)\ncredito_knn_fluxo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> ══ Workflow ════════════════════════════════════════════════════════════════════\n#> Preprocessor: Recipe\n#> Model: nearest_neighbor()\n#> \n#> ── Preprocessor ────────────────────────────────────────────────────────────────\n#> 2 Recipe Steps\n#> \n#> • step_normalize()\n#> • step_dummy()\n#> \n#> ── Model ───────────────────────────────────────────────────────────────────────\n#> K-Nearest Neighbor Model Specification (classification)\n#> \n#> Computational engine: kknn\n```\n:::\n:::\n\n\n## Treinando o fluxo do modelo\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncredito_knn_fluxo_aj <- credito_knn_fluxo %>%\n  last_fit(split=credito_split)\n```\n:::\n\n\n## Calculando as métricas de desempenho nos dados de teste\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncredito_knn_fluxo_aj %>%\n  collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 2 × 4\n#>   .metric  .estimator .estimate .config             \n#>   <chr>    <chr>          <dbl> <chr>               \n#> 1 accuracy binary         0.970 Preprocessor1_Model1\n#> 2 roc_auc  binary         0.806 Preprocessor1_Model1\n```\n:::\n:::\n\n\n## Definindo metricas específicas\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncredito_metricas <- metric_set(roc_auc, sens, spec)\n```\n:::\n\n\n## Criando envelopes de validação cruzada\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2023)\ncredito_envelopes <- vfold_cv(conj_treino, v=10,\n                              strata=inadimplente)\n```\n:::\n\n\n## Ajustar com reamostragem\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncredito_knn_ra <- credito_knn_fluxo %>%\n  fit_resamples(resamples= credito_envelopes)\n```\n:::\n\n\n## Visualizando as métricas\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncredito_knn_ra %>% collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 2 × 6\n#>   .metric  .estimator  mean     n std_err .config             \n#>   <chr>    <chr>      <dbl> <int>   <dbl> <chr>               \n#> 1 accuracy binary     0.964    10 0.00130 Preprocessor1_Model1\n#> 2 roc_auc  binary     0.798    10 0.0139  Preprocessor1_Model1\n```\n:::\n:::\n",
    "supporting": [
      "Aula08A_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}