{
  "hash": "7c965213c57ffc0e5f9b8006ff2251eb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Arvores de Classificação - XGboost\"\nauthor: \"Ricardo Accioly\"\ndate: \"2024-11-24\"\nexecute: \n  echo: true\n  warning: false\n  message: false\n  freeze: auto\nformat:\n html:\n    code-link: true\n    fig-height: 10\n    fig-width: 10\n    fig-align: center\n    fig-dpi: 300\nknitr: \n  opts_chunk: \n    out.width: 90%\n    fig.showtext: true\n    collapese: true\n---\n\n\n\n\n## Bibliotecas\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ISLR)\n```\n:::\n\n\n\n\n## Dados\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(Default)\nsummary(Default)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n default    student       balance           income     \n No :9667   No :7056   Min.   :   0.0   Min.   :  772  \n Yes: 333   Yes:2944   1st Qu.: 481.7   1st Qu.:21340  \n                       Median : 823.6   Median :34553  \n                       Mean   : 835.4   Mean   :33517  \n                       3rd Qu.:1166.3   3rd Qu.:43808  \n                       Max.   :2654.3   Max.   :73554  \n```\n\n\n:::\n\n```{.r .cell-code}\nstr(Default)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t10000 obs. of  4 variables:\n $ default: Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 1 1 1 1 1 1 ...\n $ student: Factor w/ 2 levels \"No\",\"Yes\": 1 2 1 1 1 2 1 2 1 1 ...\n $ balance: num  730 817 1074 529 786 ...\n $ income : num  44362 12106 31767 35704 38463 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(Default)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  default student   balance    income\n1      No      No  729.5265 44361.625\n2      No     Yes  817.1804 12106.135\n3      No      No 1073.5492 31767.139\n4      No      No  529.2506 35704.494\n5      No      No  785.6559 38463.496\n6      No     Yes  919.5885  7491.559\n```\n\n\n:::\n:::\n\n\n\n\n## Manipulando os dados\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncredito <- tibble(Default)\nsummary(credito)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n default    student       balance           income     \n No :9667   No :7056   Min.   :   0.0   Min.   :  772  \n Yes: 333   Yes:2944   1st Qu.: 481.7   1st Qu.:21340  \n                       Median : 823.6   Median :34553  \n                       Mean   : 835.4   Mean   :33517  \n                       3rd Qu.:1166.3   3rd Qu.:43808  \n                       Max.   :2654.3   Max.   :73554  \n```\n\n\n:::\n\n```{.r .cell-code}\n# renomeando colunas\ncredito <- credito %>% \n                rename( inadimplente = default, estudante = student, balanco = balance,\n                receita = income)\ncredito <- credito %>% mutate( inadimplente =  case_when(\n                           inadimplente == \"No\"  ~ \"Nao\",\n                           inadimplente == \"Yes\" ~ \"Sim\"\n                          )) %>% mutate(inadimplente = factor(inadimplente))\ncredito <- credito %>% mutate( estudante =  case_when(\n                           estudante == \"No\"  ~ 0,\n                           estudante == \"Yes\" ~ 1\n                          )) \n\nstr(credito)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [10,000 × 4] (S3: tbl_df/tbl/data.frame)\n $ inadimplente: Factor w/ 2 levels \"Nao\",\"Sim\": 1 1 1 1 1 1 1 1 1 1 ...\n $ estudante   : num [1:10000] 0 1 0 0 0 1 0 1 0 0 ...\n $ balanco     : num [1:10000] 730 817 1074 529 786 ...\n $ receita     : num [1:10000] 44362 12106 31767 35704 38463 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(credito)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n inadimplente   estudante         balanco          receita     \n Nao:9667     Min.   :0.0000   Min.   :   0.0   Min.   :  772  \n Sim: 333     1st Qu.:0.0000   1st Qu.: 481.7   1st Qu.:21340  \n              Median :0.0000   Median : 823.6   Median :34553  \n              Mean   :0.2944   Mean   : 835.4   Mean   :33517  \n              3rd Qu.:1.0000   3rd Qu.:1166.3   3rd Qu.:43808  \n              Max.   :1.0000   Max.   :2654.3   Max.   :73554  \n```\n\n\n:::\n:::\n\n\n\n\n## Treino e Teste\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\nset.seed(21)\ny <- credito$inadimplente\nindice_teste <- createDataPartition(y, times = 1, p = 0.2, list = FALSE)\n\nx_conj_treino <- credito %>% slice(-indice_teste) %>% select(-inadimplente)\nx_conj_teste <- credito %>% slice(indice_teste) %>% select(-inadimplente)\ny_treino <- credito %>% slice(-indice_teste) %>% select(inadimplente) \ny_treino <- as.integer(unlist(y_treino))-1\ny_teste <- credito %>% slice(indice_teste) %>% select(inadimplente)\ny_teste <- as.integer(unlist(y_teste))-1\n```\n:::\n\n\n\n\n## Treinando\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## 1a tentativa Xgboost\nlibrary(xgboost)\nnum_class = 2\nparams = list(\n  booster=\"gbtree\",\n  eta=0.001,\n  max_depth=5,\n  gamma=3,\n  subsample=0.75,\n  colsample_bytree=1,\n  objective=\"multi:softprob\",\n  eval_metric=\"mlogloss\",\n  num_class=num_class\n)\n\nset.seed(21)\ncv <- xgb.cv(data = as.matrix(x_conj_treino), label = as.matrix(y_treino), params=params, \n             nrounds = 10000, nfold = 5, early_stopping_rounds=10, \n             nthreads=1, verbose=FALSE)\n# cv\nelog <- as.data.frame(cv$evaluation_log)\nelog %>% \n   summarize(ntrees.train = which.min(train_mlogloss_mean),  \n             ntrees.test  = which.min(test_mlogloss_mean))   \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ntrees.train ntrees.test\n1         6678        6668\n```\n\n\n:::\n\n```{.r .cell-code}\n(nrounds <- which.min(elog$test_mlogloss_mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6668\n```\n\n\n:::\n:::\n\n\n\n\n## Modelo Final\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelo_xgb <- xgboost(data = as.matrix(x_conj_treino), label = as.matrix(y_treino),\n             params=params, nrounds = nrounds, verbose = FALSE)\n```\n:::\n\n\n\n\n## Importancia das variáveis\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimportancia <- xgb.importance(model = modelo_xgb)\nimportancia\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Feature        Gain       Cover  Frequency\n      <char>       <num>       <num>      <num>\n1:   balanco 0.936743463 0.938791966 0.74828024\n2:   receita 0.057924670 0.052455552 0.22517788\n3: estudante 0.005331867 0.008752483 0.02654188\n```\n\n\n:::\n\n```{.r .cell-code}\nxgb.plot.importance(importancia)\n```\n\n::: {.cell-output-display}\n![](Aula12.3_files/figure-html/unnamed-chunk-5-1.png){width=90%}\n:::\n:::\n\n\n\n\n## Previsões\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_conj_teste$prev <- predict(modelo_xgb, as.matrix(x_conj_teste), reshape=T)\n```\n:::\n\n\n\n\n## Avaliando\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxgb.ychapeu <- as.factor(ifelse(x_conj_teste$prev[,1] > 0.5,0,1))\nconfusionMatrix(xgb.ychapeu,as.factor(y_teste), positive=\"1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction    0    1\n         0 1924   38\n         1   10   29\n                                          \n               Accuracy : 0.976           \n                 95% CI : (0.9683, 0.9823)\n    No Information Rate : 0.9665          \n    P-Value [Acc > NIR] : 0.008318        \n                                          \n                  Kappa : 0.5357          \n                                          \n Mcnemar's Test P-Value : 9.735e-05       \n                                          \n            Sensitivity : 0.43284         \n            Specificity : 0.99483         \n         Pos Pred Value : 0.74359         \n         Neg Pred Value : 0.98063         \n             Prevalence : 0.03348         \n         Detection Rate : 0.01449         \n   Detection Prevalence : 0.01949         \n      Balanced Accuracy : 0.71383         \n                                          \n       'Positive' Class : 1               \n                                          \n```\n\n\n:::\n:::\n",
    "supporting": [
      "Aula12.3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}