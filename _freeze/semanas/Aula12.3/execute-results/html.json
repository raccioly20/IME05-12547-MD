{
  "hash": "aec1da82e3596ffcb99d2594362cb112",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Arvores de Classificação - XGboost\"\nauthor: \"Ricardo Accioly\"\ndate: \"2025-05-30\"\nexecute: \n  echo: true\n  warning: false\n  message: false\n  freeze: auto\nformat:\n html:\n    code-link: true\n    fig-height: 10\n    fig-width: 10\n    fig-align: center\n    fig-dpi: 300\nknitr: \n  opts_chunk: \n    out.width: 90%\n    fig.showtext: true\n    collapese: true\n---\n\n## Bibliotecas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ISLR)\nlibrary(xgboost)\nlibrary(dplyr)\nlibrary(caret)\nlibrary(pROC)\n```\n:::\n\n\n## Dados\n\nVamos começar a aplicar a metodologia de árvores usando **árvores de classificação** para analisar os dados existentes em `Carseats`. Este conjunto de dados (simulado) é sobre venda de assentos de criança para carros. Ele tem 400 observações das seguintes variáveis (11), cujos nomes serão convertidos para o português:\n\nSales: vendas em unidades (em mil) em cada local\n\nCompPrice: preço cobrado pelo competidor em cada local\n\nIncome: nível de renda da comunidade local (em mil US\\$)\n\nAdvertising: orçamento local de propaganda (em mil US\\$)\n\nPopulation: população na região (em mil)\n\nPrice: preço cobrado pela empresa em cada local\n\nShelveLoc: um fator com níveis Ruim, Bom e Medio indicando a qualidade da localização das prateleiras para os assentos em cada lugar\n\nAge: idade media da população local\n\nEducation: nível de educação em cada local\n\nUrban: um fator Sim e Não indicando se a loja esta em uma área urbana ou rural\n\nUS: um fator indicando se a loja é nos EUA ou não\n\nNeste dados, `Sales` é a variável resposta, só que ela é uma variável contínua, por este motivo vamos usá-la para criar uma variável binária. Vamos usar a função `ifelse()` para criar a variável binária, que chamaremos de **alta**, ela assume os valores `Sim` se `Sales` for maior que 8 e assume o valor `Não` caso contrário:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(Carseats)\nsummary(Carseats)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Sales          CompPrice       Income        Advertising    \n Min.   : 0.000   Min.   : 77   Min.   : 21.00   Min.   : 0.000  \n 1st Qu.: 5.390   1st Qu.:115   1st Qu.: 42.75   1st Qu.: 0.000  \n Median : 7.490   Median :125   Median : 69.00   Median : 5.000  \n Mean   : 7.496   Mean   :125   Mean   : 68.66   Mean   : 6.635  \n 3rd Qu.: 9.320   3rd Qu.:135   3rd Qu.: 91.00   3rd Qu.:12.000  \n Max.   :16.270   Max.   :175   Max.   :120.00   Max.   :29.000  \n   Population        Price        ShelveLoc        Age          Education   \n Min.   : 10.0   Min.   : 24.0   Bad   : 96   Min.   :25.00   Min.   :10.0  \n 1st Qu.:139.0   1st Qu.:100.0   Good  : 85   1st Qu.:39.75   1st Qu.:12.0  \n Median :272.0   Median :117.0   Medium:219   Median :54.50   Median :14.0  \n Mean   :264.8   Mean   :115.8                Mean   :53.32   Mean   :13.9  \n 3rd Qu.:398.5   3rd Qu.:131.0                3rd Qu.:66.00   3rd Qu.:16.0  \n Max.   :509.0   Max.   :191.0                Max.   :80.00   Max.   :18.0  \n Urban       US     \n No :118   No :142  \n Yes:282   Yes:258  \n                    \n                    \n                    \n                    \n```\n\n\n:::\n\n```{.r .cell-code}\nstr(Carseats)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t400 obs. of  11 variables:\n $ Sales      : num  9.5 11.22 10.06 7.4 4.15 ...\n $ CompPrice  : num  138 111 113 117 141 124 115 136 132 132 ...\n $ Income     : num  73 48 35 100 64 113 105 81 110 113 ...\n $ Advertising: num  11 16 10 4 3 13 0 15 0 0 ...\n $ Population : num  276 260 269 466 340 501 45 425 108 131 ...\n $ Price      : num  120 83 80 97 128 72 108 120 124 124 ...\n $ ShelveLoc  : Factor w/ 3 levels \"Bad\",\"Good\",\"Medium\": 1 2 3 3 1 1 3 2 3 3 ...\n $ Age        : num  42 65 59 55 38 78 71 67 76 76 ...\n $ Education  : num  17 10 12 14 13 16 15 10 10 17 ...\n $ Urban      : Factor w/ 2 levels \"No\",\"Yes\": 2 2 2 2 2 1 2 2 1 1 ...\n $ US         : Factor w/ 2 levels \"No\",\"Yes\": 2 2 2 2 1 2 1 2 1 2 ...\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Manipulando os dados\ncad_crianca <- Carseats %>% rename(vendas = Sales, \n                                   preco_comp = CompPrice,\n                                   renda = Income,\n                                   propaganda = Advertising,\n                                   populacao = Population,\n                                   preco = Price,\n                                   local_prat = ShelveLoc,\n                                   idade = Age,\n                                   educacao = Education,\n                                   urbano = Urban,\n                                   eua = US)\n\ncad_crianca <- cad_crianca %>% mutate(vendaAlta = ifelse(vendas > 8, 1, 0)) %>%  select(-vendas)\n\n# Dividir em treino e teste\nset.seed(21)\nindice <- createDataPartition(cad_crianca$vendaAlta, p = 0.7, list = FALSE)\nconj_treino <- cad_crianca[indice, ]\nconj_teste <- cad_crianca[-indice, ]\n\n# Codificação dummy para variáveis categóricas\ndummies <- dummyVars(vendaAlta ~ ., data = conj_treino)\nX_treino <- predict(dummies, newdata = conj_treino)\nX_teste <- predict(dummies, newdata = conj_teste)\n\n# Criar matrizes DMatrix\ndtreino <- xgb.DMatrix(data = X_treino, label = conj_treino$vendaAlta)\ndteste <- xgb.DMatrix(data = X_teste, label = conj_teste$vendaAlta)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Parâmetros do modelo\nparam <- list(\n  objective = \"binary:logistic\",\n  eval_metric = \"error\",\n  max_depth = 4,\n  eta = 0.1\n)\n\n# Treinamento\nmodel <- xgb.train(\n  params = param,\n  data = dtreino,\n  nrounds = 100,\n  watchlist = list(train = dtreino, test = dteste),\n  verbose = 0\n)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Previsões\npred_prob <- predict(model, dteste)\npred_class <- ifelse(pred_prob > 0.5, 1, 0)\n\n# Matriz de confusão\nconf_matrix <- confusionMatrix(factor(pred_class), factor(conj_teste$vendaAlta))\nconf_matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction  0  1\n         0 56 14\n         1 12 38\n                                          \n               Accuracy : 0.7833          \n                 95% CI : (0.6989, 0.8533)\n    No Information Rate : 0.5667          \n    P-Value [Acc > NIR] : 5.495e-07       \n                                          \n                  Kappa : 0.5568          \n                                          \n Mcnemar's Test P-Value : 0.8445          \n                                          \n            Sensitivity : 0.8235          \n            Specificity : 0.7308          \n         Pos Pred Value : 0.8000          \n         Neg Pred Value : 0.7600          \n             Prevalence : 0.5667          \n         Detection Rate : 0.4667          \n   Detection Prevalence : 0.5833          \n      Balanced Accuracy : 0.7771          \n                                          \n       'Positive' Class : 0               \n                                          \n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroc_obj <- roc(conj_teste$vendaAlta, pred_prob)\nplot(roc_obj, main = \"Curva ROC - XGBoost\", col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](Aula12.3_files/figure-html/unnamed-chunk-5-1.png){width=90%}\n:::\n\n```{.r .cell-code}\nauc(roc_obj)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nArea under the curve: 0.8767\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimportance <- xgb.importance(model = model)\nxgb.plot.importance(importance_matrix = importance)\n```\n\n::: {.cell-output-display}\n![](Aula12.3_files/figure-html/unnamed-chunk-6-1.png){width=90%}\n:::\n:::\n\n\n",
    "supporting": [
      "Aula12.3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}