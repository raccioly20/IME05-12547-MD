---
title: "Carregando dados, Manipulando e Visualizando"
author: "Ricardo Accioly"
date: ' `r Sys.Date()` '
format:
 html:
    code-link: true
    fig-width: 9
    fig-height: 7
    fig-dpi: 300
knitr:
  opts_chunk: 
    out.width: 90%
    comment: "#>"
execute:
  freeze: auto
---

## Entrada de dados no R

## Lendo dados de arquivos csv

```{r csv}
library(readr)
url <- "https://www.gov.br/anp/pt-br/centrais-de-conteudo/dados-abertos/arquivos-acervo-de-dados-tecnicos/tabela-pocos.csv"

```

## O read_delim permite que seja definido o tipo de delimitador dos dados

```{r}
pocos <- read_delim(url, delim = ";", locale= locale(decimal_mark = ","), col_names = TRUE)
head(pocos)
```

## Bibliotecas

Vamos carregar as bibliotecas que serão usadas na manipulação e visualização de dados.

O pacote tidyverse carrega diversos pacotes muito uteis na manipulação e visualização de dados

```{r carregando_bibliotecas}
#| message: false
library("tidyverse")
```

Vamos primeiro conhecer o que tem na base de dados pocos. A base de dados possui `r  nrow(pocos)` linhas

```{r conhecendo_pocos}
class(pocos)  # Tipo de base de dados
```

## Dados de poços

Os dados da tabela poços tem 60 colunas, mas vejam que existem diversas variáveis com dados ausentes "NA".

## Variaveis com dados ausentes

```{r}
str(pocos) # estrutura da base de dados
```

## Criando um filtro de dados ausentes

```{r}
n <-  nrow(pocos)

## Calculando razão de valores ausentes
val_ausentes_df <- pocos %>% 
  summarize(across(everything(), ~ sum(is.na(.)))) %>% 
  pivot_longer(everything(), names_to = "variavel", values_to = "num_val_ausentes") %>% 
  mutate(razao_val_ausente = num_val_ausentes / n)

## Vendo resultado
knitr::kable(val_ausentes_df, booktabs = TRUE)

## filtro
val_ausente_filtro <- val_ausentes_df %>% 
  filter(razao_val_ausente <= 0.5) %>% 
  pull(variavel)

# Aplicando o filtro
poco_filtrado <- pocos %>% 
  select(all_of(val_ausente_filtro))
```

Vamos inicialmente selecionar algumas colunas para podermos trabalhar com os dados.

**As colunas que vamos trabalhar são:**

1)  POCO
2)  OPERADOR
3)  ESTADO
4)  BACIA
5)  CAMPO
6)  TERRA_MAR
7)  CATEGORIA
8)  SITUACAO
9)  INICIO
10) TERMINO
11) PROFUNDIDADE_SONDADOR_M

Para selecionar colunas usamos a função `select`

```{r selecionando}
## Vamos selecionar as colunas listadas acima
pocos_01 <- poco_filtrado %>% select(POCO,OPERADOR,ESTADO,BACIA, CAMPO,TERRA_MAR,CATEGORIA,SITUACAO, INICIO, TERMINO, PROFUNDIDADE_SONDADOR_M)
head(pocos_01)
summary(pocos_01)
```

## Outra sumarização

```{r}

library(summarytools)
dfSummary(pocos_01) |> stview(method = "render")
```

## Manipulação de dados

Vamos eliminar as linhas de dados que apresenta dados ausentes "NA" nas colunas TERMINO e PROFUNDIDADE_SONDADOR_M.

```{r eliminando_linhas}
sum(is.na(pocos_01))
sum(is.na(pocos_01$INICIO))
sum(is.na(pocos_01$TERMINO))
sum(is.na(pocos_01$PROFUNDIDADE_SONDADOR_M))
pocos_01 <- pocos_01 %>% drop_na(any_of(c("TERMINO",
                            "PROFUNDIDADE_SONDADOR_M")))
# melhorando a visualização dos dados
knitr::kable(
  head(pocos_01, 10), booktabs = TRUE,
  caption = 'Uma tabela mais elegante com as 10 primeras linhas de pocos_01.')
sum(is.na(pocos_01))
```

## Corrigindo tipo de dados

As colunas INICIO e TERMINO são datas, mas foram lidas como caracter, vamos corrigir isto!

Para trabalhar com datas vamos usar o pacote `lubridate`

```{r tipo_dados}
library(lubridate)
pocos_01$INICIO <- dmy_hm(pocos_01$INICIO, locale = Sys.getlocale("LC_TIME"))
pocos_01$TERMINO <- dmy_hm(pocos_01$TERMINO, locale = Sys.getlocale("LC_TIME"))
str(pocos_01)
```

## Filtrando dados

Vamos analisar os poços de uma detreminada região, para isto podemos fltrar os poços de um bloco. Vamos filtrar somente os poços do CAMPO PEREGRINO usando a função `filter`.

```{r filtrando}
pocos_02 <- pocos_01 %>% filter(CAMPO=="PEREGRINO") ##  
summary(pocos_02)
knitr::kable(
  head(pocos_02, 10), booktabs = TRUE,
  caption = 'Uma tabela mais elegante com as 10 primeras linhas de pocos_02.')
```

### Avaliando os dados

Os poços possuem diversas categorias, vamos ver que categorias existem nestes poços campo de Peregrino.

```{r identificando}
unique(pocos_02$CATEGORIA)
pocos_02 %>% group_by(CATEGORIA) %>% summarize(total=n())
```

### Filtrando poços de desenvolvimento

```{r filtrando2}
pocos_03 <- pocos_02 %>% filter(CATEGORIA=="Desenvolvimento") ##  
summary(pocos_03)
knitr::kable(
  head(pocos_03, 10), booktabs = TRUE,
  caption = 'Uma tabela mais elegante com as 10 primeras linhas de pocos_03.')
```

## Criando uma coluna com mutate

Vamos criar uma coluna que nos dará a duração da perfuração dos poços.

```{r criando_coluna}
pocos_03$INICIO[1]
pocos_03$TERMINO[1]
pocos_03$TERMINO[1] - pocos_03$INICIO[1]
difftime(pocos_03$TERMINO[1], pocos_03$INICIO[1], units = "days")
tempo <- difftime(pocos_03$TERMINO[1], pocos_03$INICIO[1], units = "days")
str(tempo)
(pocos_03$INICIO[1] %--% pocos_03$TERMINO[1])/ddays(1)
pocos_03 <- pocos_03 %>% mutate(TPERF = (INICIO %--% TERMINO)/ddays(1))
summary(pocos_03)
```

### Eliminando colunas com tempos negativos

```{r filtrando_coluna}
pocos_03 %>% filter(TPERF<0) %>% select(POCO, INICIO, TERMINO)
pocos_03 <- pocos_03 %>% filter(TPERF > 0) 
```

## Visualizando os dados de PEREGRINO

### Box-Plot

```{r boxplot}
ggplot(pocos_03, aes(x=CAMPO, y=TPERF)) +
  geom_boxplot()
```

Veja que existem alguns tempos bem elevados que estão representados por pontos no box-plot. Eles podem ser considerados pontos afastados (outliers), que neste caso vamos eliminar.

```{r outliers}
pocos_04 <- pocos_03 %>% filter(TPERF < 100)
ggplot(pocos_04, aes(x=CAMPO, y=TPERF)) +
  geom_boxplot()
```

### Histograma

```{r histograma}
ggplot(pocos_04, aes(x=TPERF)) +
  geom_histogram()
```

Veja que desta forma o ggplot usa o seu padrão de 30 faixas de dados, que geralmente não é o mais adequado.

Vamos usar uma regra adequada para definição de número de faixas.

### Criando um histograma usando a regra de Sturges

A regra de Sturges indica `r round(1+3.322*log10(nrow(pocos_04)),0)` faixas enquanto que o padrão do ggplot2 é 30.

```{r Sturges}
ggplot(pocos_04, aes(x = TPERF)) +
  geom_histogram(bins = round(1+3.322*log10(nrow(pocos_04)),0))
```

Veja que agora temos um histograma mais suave.

### Gráfico de Dispersão

```{r dispersao}
ggplot(pocos_04, aes(x=PROFUNDIDADE_SONDADOR_M, y=TPERF)) + 
  geom_point()
cor(pocos_04$PROFUNDIDADE_SONDADOR_M, pocos_04$TPERF)
```

Podemos perceber que há uma relação entre o tempo de perfuração e a profundidade do poço.

Também é possível se perceber que ainda existem dados com comportamentos estranhos. Poços rasos com profundidade muito diferente dos demais, além disso um poço muito profundo com duração muito pequena.

Se fossemos construir um modelo certamente terímos que investigar o porque destes comportamentos.

### Melhorando a descrição das colunas

```{r renomeando_colunas}
names(pocos_04)
pocos_04A <- pocos_04
names(pocos_04) <- tolower(names(pocos_04))
names(pocos_04)
# Outra forma com o pacote janitor
library(janitor)
names(pocos_04A)
pocos_04A <- clean_names(pocos_04A)
names(pocos_04A)
```
