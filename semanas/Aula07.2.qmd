---
title: "Regressão Linear Múltipla"
author: "Ricardo Accioly"
date: "`r Sys.Date()`"
format:
  html:
    grid: 
      margin-width: 350px
    code-link: TRUE
reference-location: margin
citation-location: margin
knitr:
  opts_chunk: 
    out.width: 90%
    comment: "#>"
execute:
  freeze: auto
---

## Carregando bibliotecas

```{r}
library(tidyverse)
```

## Dados de propaganda

O conjunto de dados contém estatísticas sobre as vendas de um produto em 200 diferentes mercados, juntamente com orçamentos publicitários em cada um desses mercados, para diferentes canais de mídia: TV, rádio e jornal. As vendas estão em milhares de unidades e o orçamento está em milhares de dólares.

```{r}
library(readxl)
propaganda <- read_excel("Propaganda.xlsx")
summary(propaganda)
```

## Renomeando

```{r}
propaganda <- propaganda %>% rename(Jornal = Newspaper, Vendas = Sales)

```

## Sumario

```{r}
summary(propaganda)
nrow(propaganda)
```

## Criando amostra de treino e teste

```{r}
library(caret)
set.seed(21)
y <- propaganda$Vendas
indice_teste <- createDataPartition(y, times = 1, p = 0.40, list = FALSE)

conj_treino <- propaganda[-indice_teste, ]
conj_teste <- propaganda[indice_teste, ]

str(conj_treino)
str(conj_teste)

library(gt)
gt(head(conj_treino, 6))  %>% 
  tab_header(title = "Conjunto de Treino")
```

## E se eu usar uma outra semente?

```{r}
set.seed(1234)
y2 <- propaganda$Vendas
indice_teste2 <- createDataPartition(y2, times = 1, p = 0.40, list = FALSE)

conj_treino2 <- propaganda[-indice_teste2, ]
conj_teste2 <- propaganda[indice_teste2, ]

gt(head(conj_treino2, 6))  %>% 
  tab_header(title = "2o Conjunto de Treino")
```

```{r}
#| message: false
library(dlookr)
diagnose_numeric(conj_treino)
diagnose_numeric(conj_treino2)
```

Veja que as amostram ficaram com resultados diferentes, o que levaria a obtermos modelos diferentes num ajuste de regressão!

## Regressão Simples

```{r}
mod1 <- lm( Vendas ~ TV, data = conj_treino)
mod2 <- lm( Vendas ~ Radio, data = conj_treino)
mod3 <- lm( Vendas ~ Jornal, data = conj_treino)
```

## Avaliando as correlações

```{r}
library(corrplot)
mat_corr <- cor(conj_treino)
corrplot(mat_corr)
```

## 1a Regressão Multipla

```{r}
library(car)
scatterplotMatrix(conj_treino)
mod4 <- lm( Vendas ~ TV + Radio + Jornal, data = conj_treino)
summary(mod4)
```

Vejam que ao analisarmos a estatística t de Jornal percebemos que não podemos rejeitar a hipótese de que o coeficiente de Jornal possa ser zero.

Vamos refazer o modleo sem Jornal.

## 2a Regressao Multipla

```{r}
mod5 <- lm( Vendas ~ TV + Radio, data = conj_treino)
summary(mod5)

```

Agora todas as variáveis tem indicação de significância estatística.

## Confirmando o teste t com o teste F (ANOVA)

```{r}
anova(mod5, mod4)
```

## Vamos comparar com o modelo só com TV

```{r}
anova(mod1, mod5)
```

Veja que agora a diferença é significativa. O melhor modelo é o com TV e Radio (mod5)

## Calculando o erro padrão do resíduo com amostra de teste

```{r}
sqrt(mean((conj_teste$Vendas - predict(mod5, conj_teste)) ^ 2)) 
```

## Comparando com a melhor regressão simples

```{r}
## Modelo com somente TV
summary(mod1)$sigma
summary(mod1)$r.squared
sqrt(mean((conj_teste$Vendas - predict(mod1, conj_teste)) ^ 2))
## Modelo com TV e Jornal
summary(mod5)$sigma
summary(mod5)$adj.r.squared
sqrt(mean((conj_teste$Vendas - predict(mod5, conj_teste)) ^ 2))
```

## Comparando valor real vs ajustado

```{r}
conj_treino$Previsoes <- predict(mod5, data=conj_treino)
ggplot(conj_treino, aes(x=Previsoes, y=Vendas)) + 
  geom_point() +
  geom_abline(color = "darkblue") +
  ggtitle("Vendas vs. Previsões do modelo linear")
```

## Análise Inicial dos Resíduos

```{r}
plot(mod5)
```

## Análise do Modelo - Parte 2

O pacote easystats tem uma função que faz uma análise mais detalhada do modelo. Os gráficos são mais fáceis de interpretar do que os obtidos com o plot do R base.

```{r}
#| fig-width: 11
#| fig-height: 10
#| fig-column: page-right
#| warning: false
library(easystats)
check_model(mod5)
```

## Análise do Modelo - Parte 3

O pacote car apresenta funções mais avançadas para análise de resíduos.

Para o gráfico de resíduos versus valores ajustados, podemos usar um teste chamado teste de Tukey de não aditividade (Tukey, 1949), ele é obtido adicionando os quadrados dos valores ajustados ao modelo e reajustando. O valor p para o teste de Tukey é obtido comparando a estatística de teste para a distribuição padrão-normal. O teste confirma a visível impressão de curvatura no gráfico residual, reforçando ainda mais a conclusão que o modelo não é adequado.

```{r}
library(car)
residualPlots(mod5)
influencePlot(mod5)
```

## Tentando avaliar transformações

Aqui vamos avaliar a necessidade de transformar as variáveis para melhorar o modelo.

```{r}

summary(p1 <- powerTransform(Vendas ~ TV + Radio, data=conj_treino))
summary(p2 <- powerTransform(cbind(TV, Radio) ~1 , data=conj_treino))
boxCox(mod5, lambda = seq(-2, 2, 1/10))

```

## Análise do Modelo com car

```{r}
# Fator de inflação da variância
vif(mod5)
```

# Teste dos resíduos

Teste de normalidade Teste de heterocedasticidade (Bresch-Pagan) Teste de autocorrelação (Durbin-Watson)

```{r}
library(lmtest)
mod5_sum <- summary(mod5)
# Teste de normalidade
shapiro.test(mod5_sum$residuals)
# Teste de heterocedasticidade
bptest(mod5)
#Teste de autocorrelação
dwtest(mod5)
```

## Dado que parece outlier e é um valor influente

A função OutlierTest () no pacote do car localiza o maior resíduo studentizado em valor absoluto e calcula o teste t com correção de Bonferroni. O testes de Outlier utiliza uma distribuição t para testar se o maior valor do residuo studentizado do modelo é estatisticamente diferente das outras observações. Um valor p significativo indica um outlier extremo que merece um exame mais aprofundado.

```{r}
outlierTest(mod5)
conj_treino[83,]
```
