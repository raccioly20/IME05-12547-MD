---
title: "Regressão Linear Múltipla"
author: "Ricardo Accioly"
date: "`r Sys.Date()`"
format:
 html:
    code-link: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.width = 10, 
                      fig.height= 8,  
                      fig.retina = 3,
                      message = FALSE, 
                      warning = FALSE,
                      dev=c("png"), 
                      fig.path="imagens/Aula07_2/")
```

## Carregando bibliotecas

```{r}
library(tidyverse)
```

## Dados de propaganda

O conjunto de dados contém estatísticas sobre as vendas de um produto em 200 diferentes mercados, juntamente com orçamentos publicitários em cada um desses mercados, para diferentes canais de mídia: TV, rádio e jornal. As vendas estão em milhares de unidades e o orçamento está em milhares de dólares.

```{r}
library(readxl)
propaganda <- read_excel("Propaganda.xlsx")
summary(propaganda)
```

## Renomeando

```{r}
propaganda <- propaganda %>% rename(Jornal = Newspaper, Vendas = Sales)

```

## Sumario

```{r}
summary(propaganda)
nrow(propaganda)
```

## Linhas inicias

```{r}
library(gt)
gt(head(propaganda, 10))
```

## Criando amostra de treino e teste

```{r}
library(caret)
set.seed(21)
y <- propaganda$Vendas
indice_teste <- createDataPartition(y, times = 1, p = 0.40, list = FALSE)

conj_treino <- propaganda %>% slice(-indice_teste)
conj_teste <- propaganda %>% slice(indice_teste)

str(conj_treino)
str(conj_teste)
gt(head(conj_treino, 10))
```

## Regressão Simples

```{r}
mod1 <- lm( Vendas ~ TV, data = conj_treino)
mod2 <- lm( Vendas ~ Radio, data = conj_treino)
mod3 <- lm( Vendas ~ Jornal, data = conj_treino)
```

## 1a Regressão Multipla

```{r}
library(car)
scatterplotMatrix(conj_treino)
mod4 <- lm( Vendas ~ TV + Radio + Jornal, data = conj_treino)
summary(mod4)
```

## 2a Regressao Multipla

```{r}
mod5 <- lm( Vendas ~ TV + Radio, data = conj_treino)
summary(mod5)

```

## Confirmando o teste t com o teste F (ANOVA)

```{r}
anova(mod5, mod4)
```

## Calculando o erro padrão do resíduo com amostra de teste

```{r}
sqrt(mean((conj_teste$Vendas - predict(mod5, conj_teste)) ^ 2)) 
```

## Comparando com a melhor regressão simples

```{r}
## Modelo com somente TV
summary(mod1)$sigma
summary(mod1)$r.squared
sqrt(mean((conj_teste$Vendas - predict(mod1, conj_teste)) ^ 2))
## Modelo com TV e Jornal
summary(mod5)$sigma
summary(mod5)$adj.r.squared
sqrt(mean((conj_teste$Vendas - predict(mod5, conj_teste)) ^ 2))
```

## Análise do Modelo 1

```{r}
library(performance)
check_model(mod5)
```

## Análise do Modelo 2

```{r}
plot(mod5)
```

## Análise do Modelo 3

Para o gráfico de resíduos versus valores ajustados, podemos usar um teste chamado teste de Tukey de não aditividade (Tukey, 1949), ele é obtido adicionando os quadrados dos valores ajustados ao modelo e reajustando. O valor p para o teste de Tukey é obtido comparando a estatística de teste para a distribuição padrão-normal. O teste confirma a visível impressão de curvatura no gráfico residual, reforçando ainda mais a conclusão que o modelo não é adequado.

```{r}
library(car)
residualPlots(mod5)
```

## Análise do Modelo com car

```{r}
library(car)
vif(mod5)
```

## Tentando avaliar transformações

```{r}
summary(p1 <- powerTransform(Vendas ~ TV + Radio, data=conj_treino))
summary(p2 <- powerTransform(cbind(TV, Radio) ~1 , data=conj_treino))

```

## Dado que parece outlier e é um valor influente

A função OutlierTest () no pacote do car localiza o maior resíduo studentizado em valor absoluto e calcula o teste t com correção de Bonferroni. O testes de Outlier utiliza uma distribuição t para testar se o maior valor do residuo studentizado do modelo é estatisticamente diferente das outras observações. Um valor p significativo indica um outlier extremo que merece um exame mais aprofundado.

```{r}
outlierTest(mod5)
conj_treino[83,]
```

# Teste dos resíduos

Teste de normalidade Teste de heterocedasticidade (Bresch-Pagan) Teste de autocorrelação (Durbin-Watson)

```{r}
library(lmtest)
mod5_sum <- summary(mod5)
shapiro.test(mod5_sum$residuals)
bptest(mod5)
dwtest(mod5)
```
