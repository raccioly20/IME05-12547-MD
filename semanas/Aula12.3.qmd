---
title: "Arvores de Classificação - XGboost"
author: "Ricardo Accioly"
date: "`r Sys.Date()`"
execute: 
  echo: true
  warning: false
  message: false
  freeze: auto
format:
 html:
    code-link: true
    fig-height: 10
    fig-width: 10
    fig-align: center
    fig-dpi: 300
knitr: 
  opts_chunk: 
    out.width: 90%
    fig.showtext: true
    collapese: true
---

## Bibliotecas

```{r bibliotecas , message=FALSE}
library(ISLR)
library(xgboost)
library(dplyr)
library(caret)
library(pROC)
```

## Dados

Vamos começar a aplicar a metodologia de árvores usando **árvores de classificação** para analisar os dados existentes em `Carseats`. Este conjunto de dados (simulado) é sobre venda de assentos de criança para carros. Ele tem 400 observações das seguintes variáveis (11), cujos nomes serão convertidos para o português:

Sales: vendas em unidades (em mil) em cada local

CompPrice: preço cobrado pelo competidor em cada local

Income: nível de renda da comunidade local (em mil US\$)

Advertising: orçamento local de propaganda (em mil US\$)

Population: população na região (em mil)

Price: preço cobrado pela empresa em cada local

ShelveLoc: um fator com níveis Ruim, Bom e Medio indicando a qualidade da localização das prateleiras para os assentos em cada lugar

Age: idade media da população local

Education: nível de educação em cada local

Urban: um fator Sim e Não indicando se a loja esta em uma área urbana ou rural

US: um fator indicando se a loja é nos EUA ou não

Neste dados, `Sales` é a variável resposta, só que ela é uma variável contínua, por este motivo vamos usá-la para criar uma variável binária. Vamos usar a função `ifelse()` para criar a variável binária, que chamaremos de **alta**, ela assume os valores `Sim` se `Sales` for maior que 8 e assume o valor `Não` caso contrário:

```{r}
data(Carseats)
summary(Carseats)
str(Carseats)
```

```{r}
# Manipulando os dados
cad_crianca <- Carseats %>% rename(vendas = Sales, 
                                   preco_comp = CompPrice,
                                   renda = Income,
                                   propaganda = Advertising,
                                   populacao = Population,
                                   preco = Price,
                                   local_prat = ShelveLoc,
                                   idade = Age,
                                   educacao = Education,
                                   urbano = Urban,
                                   eua = US)

cad_crianca <- cad_crianca %>% mutate(vendaAlta = ifelse(vendas > 8, 1, 0)) %>%  select(-vendas)

# Dividir em treino e teste
set.seed(21)
indice <- createDataPartition(cad_crianca$vendaAlta, p = 0.7, list = FALSE)
conj_treino <- cad_crianca[indice, ]
conj_teste <- cad_crianca[-indice, ]

# Codificação dummy para variáveis categóricas
dummies <- dummyVars(vendaAlta ~ ., data = conj_treino)
X_treino <- predict(dummies, newdata = conj_treino)
X_teste <- predict(dummies, newdata = conj_teste)

# Criar matrizes DMatrix
dtreino <- xgb.DMatrix(data = X_treino, label = conj_treino$vendaAlta)
dteste <- xgb.DMatrix(data = X_teste, label = conj_teste$vendaAlta)

```

```{r}
# Parâmetros do modelo
param <- list(
  objective = "binary:logistic",
  eval_metric = "error",
  max_depth = 4,
  eta = 0.1
)

# Treinamento
model <- xgb.train(
  params = param,
  data = dtreino,
  nrounds = 100,
  watchlist = list(train = dtreino, test = dteste),
  verbose = 0
)

```

```{r}
# Previsões
pred_prob <- predict(model, dteste)
pred_class <- ifelse(pred_prob > 0.5, 1, 0)

# Matriz de confusão
conf_matrix <- confusionMatrix(factor(pred_class), factor(conj_teste$vendaAlta))
conf_matrix

```

```{r}
roc_obj <- roc(conj_teste$vendaAlta, pred_prob)
plot(roc_obj, main = "Curva ROC - XGBoost", col = "blue")
auc(roc_obj)

```

```{r}
importance <- xgb.importance(model = model)
xgb.plot.importance(importance_matrix = importance)

```
