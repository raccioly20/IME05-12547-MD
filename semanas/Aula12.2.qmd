---
title: "Arvores de Classificação - GBM"
author: "Ricardo Accioly"
date: "`r Sys.Date()`"
execute: 
  echo: true
  warning: false
  message: false
  freeze: auto
format:
 html:
    code-link: true
    fig-height: 10
    fig-width: 10
    fig-align: center
    fig-dpi: 300
knitr: 
  opts_chunk: 
    out.width: 90%
    fig.showtext: true
    collapese: true
---

## Bibliotecas

```{r bibliotecas , message=FALSE}
library(ISLR)
library(dplyr)
library(gbm)
library(caret)
library(pROC)
```

## Dados

Vamos começar a aplicar a metodologia de árvores usando **árvores de classificação** para analisar os dados existentes em `Carseats`. Este conjunto de dados (simulado) é sobre venda de assentos de criança para carros. Ele tem 400 observações das seguintes variáveis (11), cujos nomes serão convertidos para o português:

Sales: vendas em unidades (em mil) em cada local

CompPrice: preço cobrado pelo competidor em cada local

Income: nível de renda da comunidade local (em mil US\$)

Advertising: orçamento local de propaganda (em mil US\$)

Population: população na região (em mil)

Price: preço cobrado pela empresa em cada local

ShelveLoc: um fator com níveis Ruim, Bom e Medio indicando a qualidade da localização das prateleiras para os assentos em cada lugar

Age: idade media da população local

Education: nível de educação em cada local

Urban: um fator Sim e Não indicando se a loja esta em uma área urbana ou rural

US: um fator indicando se a loja é nos EUA ou não

Neste dados, `Sales` é a variável resposta, só que ela é uma variável contínua, por este motivo vamos usá-la para criar uma variável binária. Vamos usar a função `ifelse()` para criar a variável binária, que chamaremos de **alta**, ela assume os valores `Sim` se `Sales` for maior que 8 e assume o valor `Não` caso contrário:

```{r}
data(Carseats)
summary(Carseats)
str(Carseats)
```

## Manipulando os dados

```{r}
cad_crianca <- Carseats %>% rename(vendas = Sales, 
                                   preco_comp = CompPrice,
                                   renda = Income,
                                   propaganda = Advertising,
                                   populacao = Population,
                                   preco = Price,
                                   local_prat = ShelveLoc,
                                   idade = Age,
                                   educacao = Education,
                                   urbano = Urban,
                                   eua = US)

cad_crianca <- cad_crianca %>%
  mutate(vendaAlta = ifelse(vendas > 8, "Alta", "Baixa")) %>%
  mutate(vendaAlta = as.factor(vendaAlta)) %>%
  select(-vendas)  # Remover Sales original

# Verificar distribuição
table(cad_crianca$vendaAlta)

str(cad_crianca)
summary(cad_crianca)

```

## Treino e Teste

```{r}
set.seed(21)
y <- cad_crianca$vendaAlta
indice_teste <- createDataPartition(y, times = 1, p = 0.2, list = FALSE)

conj_treino <- cad_crianca[-indice_teste,]
conj_teste <- cad_crianca[indice_teste,]

str(conj_treino)
prop.table(table(conj_treino$alta))
str(conj_teste)
prop.table(table(conj_teste$alta))
```


## GBM

### Ajustando um modelo GBM

```{r}
set.seed(21)

# Definir grade de parâmetros
tune_grid <- expand.grid(
  n.trees = c(100, 300, 500),
  interaction.depth = c(1, 3, 5),
  shrinkage = c(0.01, 0.1),
  n.minobsinnode = c(5, 10)
)

# Treinamento com validação cruzada
ctrl <- trainControl(method = "cv", number = 5)

gbm_caret <- train(
  vendaAlta ~ .,
  data = conj_treino,
  method = "gbm",
  distribution = "bernoulli",
  trControl = ctrl,
  tuneGrid = tune_grid,
  verbose = FALSE
)


```

## Melhor modelo

```{r}
# Melhor modelo
gbm_caret$bestTune
```


## Verificando os Resultados

```{r}
# Previsões
pred_class <- predict(gbm_caret, newdata = conj_teste)

# Matriz de confusão
confusionMatrix(pred_class, conj_teste$vendaAlta)
```

## Curva ROC

```{r}
# Probabilidades previstas
pred_prob <- predict(gbm_caret, newdata = conj_teste, type = "prob")

# Curva ROC
roc_obj <- roc(response = conj_teste$vendaAlta, predictor = pred_prob$Alta)
plot(roc_obj, col = "blue", lwd = 2, main = "Curva ROC - GBM")
auc(roc_obj)
```

## Importância das variáveis

```{r}
# Obter importância
importancia <- varImp(gbm_caret)

# Visualização gráfica
plot(importancia, top = 10, main = "Importância das Variáveis - GBM")
```

