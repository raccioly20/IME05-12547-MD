{
  "hash": "5031fcb4476265b377f34f54b3f13f6f",
  "result": {
    "markdown": "---\ntitle: \"Regressão Logística\"\nauthor: \"Ricardo Accioly\"\ndate: \"2023-10-06\"\nformat:\n html:\n    code-link: true\n    fig-width: 9\n    fig-height: 7\n    fig-dpi: 300\nknitr:\n  opts_chunk: \n    out.width: 90%\n    comment: \"#>\"\n---\n\n\n## Carregando Bibliotecas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.3     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.2     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(ISLR)\ndata(Default)\nsummary(Default)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  default    student       balance           income     \n#>  No :9667   No :7056   Min.   :   0.0   Min.   :  772  \n#>  Yes: 333   Yes:2944   1st Qu.: 481.7   1st Qu.:21340  \n#>                        Median : 823.6   Median :34553  \n#>                        Mean   : 835.4   Mean   :33517  \n#>                        3rd Qu.:1166.3   3rd Qu.:43808  \n#>                        Max.   :2654.3   Max.   :73554\n```\n:::\n\n```{.r .cell-code}\nstr(Default)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 'data.frame':\t10000 obs. of  4 variables:\n#>  $ default: Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 1 1 1 1 1 1 ...\n#>  $ student: Factor w/ 2 levels \"No\",\"Yes\": 1 2 1 1 1 2 1 2 1 1 ...\n#>  $ balance: num  730 817 1074 529 786 ...\n#>  $ income : num  44362 12106 31767 35704 38463 ...\n```\n:::\n\n```{.r .cell-code}\nhead(Default)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   default student   balance    income\n#> 1      No      No  729.5265 44361.625\n#> 2      No     Yes  817.1804 12106.135\n#> 3      No      No 1073.5492 31767.139\n#> 4      No      No  529.2506 35704.494\n#> 5      No      No  785.6559 38463.496\n#> 6      No     Yes  919.5885  7491.559\n```\n:::\n:::\n\n\n## Manipulando os dados\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncredito <- tibble(Default)\nsummary(credito)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  default    student       balance           income     \n#>  No :9667   No :7056   Min.   :   0.0   Min.   :  772  \n#>  Yes: 333   Yes:2944   1st Qu.: 481.7   1st Qu.:21340  \n#>                        Median : 823.6   Median :34553  \n#>                        Mean   : 835.4   Mean   :33517  \n#>                        3rd Qu.:1166.3   3rd Qu.:43808  \n#>                        Max.   :2654.3   Max.   :73554\n```\n:::\n\n```{.r .cell-code}\n# renomeando colunas\ncredito <- credito %>% \n                rename( inadimplente = default, estudante = student, balanco = balance,\n                receita = income)\ncredito <- credito %>% mutate( inadimplente =  case_when(\n                           inadimplente == \"No\"  ~ \"Nao\",\n                           inadimplente == \"Yes\" ~ \"Sim\"\n                          )) %>% mutate(inadimplente = factor(inadimplente))\ncredito <- credito %>% mutate( estudante =  case_when(\n                           estudante == \"No\"  ~ 0,\n                           estudante == \"Yes\" ~ 1\n                          )) \n\nstr(credito)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> tibble [10,000 × 4] (S3: tbl_df/tbl/data.frame)\n#>  $ inadimplente: Factor w/ 2 levels \"Nao\",\"Sim\": 1 1 1 1 1 1 1 1 1 1 ...\n#>  $ estudante   : num [1:10000] 0 1 0 0 0 1 0 1 0 0 ...\n#>  $ balanco     : num [1:10000] 730 817 1074 529 786 ...\n#>  $ receita     : num [1:10000] 44362 12106 31767 35704 38463 ...\n```\n:::\n\n```{.r .cell-code}\nsummary(credito)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  inadimplente   estudante         balanco          receita     \n#>  Nao:9667     Min.   :0.0000   Min.   :   0.0   Min.   :  772  \n#>  Sim: 333     1st Qu.:0.0000   1st Qu.: 481.7   1st Qu.:21340  \n#>               Median :0.0000   Median : 823.6   Median :34553  \n#>               Mean   :0.2944   Mean   : 835.4   Mean   :33517  \n#>               3rd Qu.:1.0000   3rd Qu.:1166.3   3rd Qu.:43808  \n#>               Max.   :1.0000   Max.   :2654.3   Max.   :73554\n```\n:::\n:::\n\n\n## Treino e Teste\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ✔ broom        1.0.5     ✔ rsample      1.2.0\n#> ✔ dials        1.2.0     ✔ tune         1.1.2\n#> ✔ infer        1.0.5     ✔ workflows    1.1.3\n#> ✔ modeldata    1.2.0     ✔ workflowsets 1.0.1\n#> ✔ parsnip      1.1.1     ✔ yardstick    1.2.0\n#> ✔ recipes      1.0.8\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n#> ✖ scales::discard() masks purrr::discard()\n#> ✖ dplyr::filter()   masks stats::filter()\n#> ✖ recipes::fixed()  masks stringr::fixed()\n#> ✖ dplyr::lag()      masks stats::lag()\n#> ✖ yardstick::spec() masks readr::spec()\n#> ✖ recipes::step()   masks stats::step()\n#> • Dig deeper into tidy modeling with R at https://www.tmwr.org\n```\n:::\n\n```{.r .cell-code}\nset.seed(23)\n\ncredito_split <- initial_split(credito, prop = 0.75, strata = inadimplente)\n\ncredito_split\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> <Training/Testing/Total>\n#> <7500/2500/10000>\n```\n:::\n\n```{.r .cell-code}\nconj_treino <- training(credito_split)\nconj_teste <- testing(credito_split)\n\nsummary(conj_treino)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  inadimplente   estudante         balanco          receita     \n#>  Nao:7247     Min.   :0.0000   Min.   :   0.0   Min.   :  772  \n#>  Sim: 253     1st Qu.:0.0000   1st Qu.: 485.4   1st Qu.:21199  \n#>               Median :0.0000   Median : 825.9   Median :34679  \n#>               Mean   :0.2967   Mean   : 839.1   Mean   :33501  \n#>               3rd Qu.:1.0000   3rd Qu.:1169.2   3rd Qu.:43836  \n#>               Max.   :1.0000   Max.   :2654.3   Max.   :73554\n```\n:::\n\n```{.r .cell-code}\nsummary(conj_teste)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  inadimplente   estudante         balanco          receita     \n#>  Nao:2420     Min.   :0.0000   Min.   :   0.0   Min.   : 2981  \n#>  Sim:  80     1st Qu.:0.0000   1st Qu.: 467.9   1st Qu.:21833  \n#>               Median :0.0000   Median : 815.6   Median :34036  \n#>               Mean   :0.2876   Mean   : 824.2   Mean   :33565  \n#>               3rd Qu.:1.0000   3rd Qu.:1156.2   3rd Qu.:43721  \n#>               Max.   :1.0000   Max.   :2578.5   Max.   :71879\n```\n:::\n:::\n\n\n## Matriz de dispersão\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(psych)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'psych'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following objects are masked from 'package:scales':\n#> \n#>     alpha, rescale\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following objects are masked from 'package:ggplot2':\n#> \n#>     %+%, alpha\n```\n:::\n\n```{.r .cell-code}\npairs.panels(conj_treino, \n             method = \"pearson\", # metodo de correlação\n             hist.col = \"#00AFBB\",\n             density = TRUE,  # mostra graficos de densidade\n             ellipses = FALSE # mostra elipses de correlação\n             )\n```\n\n::: {.cell-output-display}\n![](Aula09_files/figure-html/splom-1.png){width=90%}\n:::\n:::\n\n\n## Avaliando o comportamento das variáveis em função do status (inadimplente / estudante)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(conj_treino, aes(x=inadimplente, y=balanco)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](Aula09_files/figure-html/box-plot-1.png){width=90%}\n:::\n\n```{.r .cell-code}\nggplot(conj_treino, aes(x=inadimplente, y=receita)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](Aula09_files/figure-html/box-plot-2.png){width=90%}\n:::\n\n```{.r .cell-code}\nggplot(conj_treino, aes(x=as.factor(estudante), y=balanco)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](Aula09_files/figure-html/box-plot-3.png){width=90%}\n:::\n\n```{.r .cell-code}\nggplot(conj_treino, aes(x=as.factor(estudante), y=receita)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](Aula09_files/figure-html/box-plot-4.png){width=90%}\n:::\n:::\n\n\n## Balanço vs Receita\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = conj_treino, aes(x=balanco,  y = receita, col = inadimplente)) +\n  geom_point() \n```\n\n::: {.cell-output-display}\n![](Aula09_files/figure-html/dispersao-1.png){width=90%}\n:::\n:::\n\n\n## Regressão Linear?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Primeiro precisa transformar qualitativa em numérica\ninadimpl <- as.numeric(conj_treino$inadimplente) - 1\nmodelo_linear <- lm(inadimpl ~ balanco, data = conj_treino)\nplot(inadimpl ~ balanco, data = conj_treino, \n     col = \"darkorange\", pch = \"|\", ylim = c(-0.2, 1),\n     main = \"Regressão Linear - Classificação\")\nabline(h = 0, lty = 3)\nabline(h = 1, lty = 3)\nabline(h = 0.5, lty = 2)\nabline(modelo_linear, lwd = 3, col = \"dodgerblue\")\n```\n\n::: {.cell-output-display}\n![](Aula09_files/figure-html/reg-linear-1.png){width=90%}\n:::\n:::\n\n\n## Outras avaliações\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# proporção de inadimplentes\nconj_treino %>% select(inadimplente, balanco) %>% summarize(prop = mean(inadimplente == \"Sim\")) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 1 × 1\n#>     prop\n#>    <dbl>\n#> 1 0.0337\n```\n:::\n\n```{.r .cell-code}\n# media do balanço dos inadimplentes \nconj_treino %>% filter(inadimplente == \"Sim\") %>% summarize(valor= mean(balanco))   \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 1 × 1\n#>   valor\n#>   <dbl>\n#> 1 1735.\n```\n:::\n\n```{.r .cell-code}\nquantis <- quantile(conj_treino$balanco, probs = c(.1,.25, .50, .75, .9, .95, 0.97, 0.99))\nquantis\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>       10%       25%       50%       75%       90%       95%       97%       99% \n#>  188.5306  485.4389  825.9030 1169.1785 1476.8502 1670.4252 1790.7535 2014.5363\n```\n:::\n\n```{.r .cell-code}\nconj_treino %>% \n            mutate(grupo_balanco = case_when(\n               balanco<=quantis[1] ~ quantis[1],\n               balanco>quantis[1] & balanco<=quantis[2] ~ quantis[2],\n               balanco>quantis[2] & balanco<=quantis[3]  ~ quantis[3],\n               balanco>quantis[3] & balanco<=quantis[4]  ~ quantis[4],\n               balanco>quantis[4] & balanco<=quantis[5]  ~ quantis[5],\n               balanco>quantis[5] & balanco<=quantis[6]  ~ quantis[6],\n               balanco>quantis[6] & balanco<=quantis[7]  ~ quantis[7],\n               balanco>quantis[7] ~ quantis[8])) %>%\n           group_by(grupo_balanco) %>%\n           summarize(prop = mean(inadimplente == \"Sim\")) %>%\n           ggplot(aes(grupo_balanco, prop)) +\n           geom_point() +\n           geom_line()\n```\n\n::: {.cell-output-display}\n![](Aula09_files/figure-html/1avaliacao-1.png){width=90%}\n:::\n:::\n\n\n## 1a Regressão logística: só balanço\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod1 <- glm(inadimplente ~ balanco,data=conj_treino,family=binomial)\nsummary(mod1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n#> Call:\n#> glm(formula = inadimplente ~ balanco, family = binomial, data = conj_treino)\n#> \n#> Coefficients:\n#>               Estimate Std. Error z value Pr(>|z|)    \n#> (Intercept) -1.028e+01  3.960e-01  -25.96   <2e-16 ***\n#> balanco      5.267e-03  2.428e-04   21.70   <2e-16 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> (Dispersion parameter for binomial family taken to be 1)\n#> \n#>     Null deviance: 2212.3  on 7499  degrees of freedom\n#> Residual deviance: 1250.5  on 7498  degrees of freedom\n#> AIC: 1254.5\n#> \n#> Number of Fisher Scoring iterations: 8\n```\n:::\n\n```{.r .cell-code}\ncoef(mod1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  (Intercept)      balanco \n#> -10.28111686   0.00526714\n```\n:::\n\n```{.r .cell-code}\nsummary(mod1)$coef\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>                 Estimate  Std. Error   z value      Pr(>|z|)\n#> (Intercept) -10.28111686 0.396015144 -25.96142 1.351153e-148\n#> balanco       0.00526714 0.000242772  21.69582 2.246602e-104\n```\n:::\n:::\n\n\n## Avaliando o modelo\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Carregando pacotes exigidos: lattice\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'caret'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following objects are masked from 'package:yardstick':\n#> \n#>     precision, recall, sensitivity, specificity\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following object is masked from 'package:purrr':\n#> \n#>     lift\n```\n:::\n\n```{.r .cell-code}\np_chapeu <- predict(mod1, newdata = conj_teste, type = \"response\")\ny_chapeu <- ifelse(p_chapeu > 0.5, \"Sim\", \"Nao\") %>% factor(levels = levels(conj_teste$inadimplente))\nconfusionMatrix(y_chapeu, conj_teste$inadimplente, positive=\"Sim\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Confusion Matrix and Statistics\n#> \n#>           Reference\n#> Prediction  Nao  Sim\n#>        Nao 2411   55\n#>        Sim    9   25\n#>                                           \n#>                Accuracy : 0.9744          \n#>                  95% CI : (0.9674, 0.9802)\n#>     No Information Rate : 0.968           \n#>     P-Value [Acc > NIR] : 0.0357          \n#>                                           \n#>                   Kappa : 0.4277          \n#>                                           \n#>  Mcnemar's Test P-Value : 1.855e-08       \n#>                                           \n#>             Sensitivity : 0.3125          \n#>             Specificity : 0.9963          \n#>          Pos Pred Value : 0.7353          \n#>          Neg Pred Value : 0.9777          \n#>              Prevalence : 0.0320          \n#>          Detection Rate : 0.0100          \n#>    Detection Prevalence : 0.0136          \n#>       Balanced Accuracy : 0.6544          \n#>                                           \n#>        'Positive' Class : Sim             \n#> \n```\n:::\n:::\n\n\n## Veja as probabilidade de inadimplencia para balanços de 1000, 2000 e 3000\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict(mod1, newdata = data.frame(balanco = c(1000,2000,3000)), type=\"response\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>           1           2           3 \n#> 0.006600568 0.562954805 0.996011337\n```\n:::\n:::\n\n\n## Curva S\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninadimpl <- as.numeric(conj_treino$inadimplente) - 1\nplot(inadimpl ~ balanco, data = conj_treino, \n     col = \"darkorange\", pch = \"|\", ylim = c(0, 1),\n     main = \"Regressão Logistica - Classificacão\")\nabline(h = 0, lty = 3)\nabline(h = 1, lty = 3)\nabline(h = 0.5, lty = 2)\ncurve(predict(mod1, data.frame(balanco = x),\n        type = \"response\"), add = TRUE, lwd = 3, col = \"dodgerblue\")\nabline(v = -coef(mod1)[1] / coef(mod1)[2], lwd = 2)\n```\n\n::: {.cell-output-display}\n![](Aula09_files/figure-html/Curva_S-1.png){width=90%}\n:::\n:::\n\n\n## Valor de balanço com probabilidade de 50%\n\n\\-$\\beta_0$/$\\beta_1$\n\n\n::: {.cell}\n\n```{.r .cell-code}\n-coef(mod1)[1] / coef(mod1)[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> (Intercept) \n#>    1951.935\n```\n:::\n:::\n\n\n## 2a Regressão logística: todas as variáveis\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod2 <- glm(inadimplente ~ balanco + receita + estudante,data=conj_treino,family=binomial)\nsummary(mod2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n#> Call:\n#> glm(formula = inadimplente ~ balanco + receita + estudante, family = binomial, \n#>     data = conj_treino)\n#> \n#> Coefficients:\n#>               Estimate Std. Error z value Pr(>|z|)    \n#> (Intercept) -1.092e+01  5.619e-01 -19.436   <2e-16 ***\n#> balanco      5.524e-03  2.573e-04  21.470   <2e-16 ***\n#> receita      1.306e-05  9.459e-06   1.381    0.167    \n#> estudante   -4.471e-01  2.744e-01  -1.629    0.103    \n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> (Dispersion parameter for binomial family taken to be 1)\n#> \n#>     Null deviance: 2212.3  on 7499  degrees of freedom\n#> Residual deviance: 1227.8  on 7496  degrees of freedom\n#> AIC: 1235.8\n#> \n#> Number of Fisher Scoring iterations: 8\n```\n:::\n\n```{.r .cell-code}\ncoef(mod2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   (Intercept)       balanco       receita     estudante \n#> -1.092144e+01  5.524105e-03  1.306539e-05 -4.470854e-01\n```\n:::\n\n```{.r .cell-code}\nsummary(mod2)$coef\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>                  Estimate   Std. Error    z value      Pr(>|z|)\n#> (Intercept) -1.092144e+01 5.619087e-01 -19.436331  3.804218e-84\n#> balanco      5.524105e-03 2.572902e-04  21.470326 2.949418e-102\n#> receita      1.306539e-05 9.459120e-06   1.381248  1.672027e-01\n#> estudante   -4.470854e-01 2.744352e-01  -1.629111  1.032896e-01\n```\n:::\n:::\n\n\n**É possível se ver que receita não é significativa**\n\n## 3a Regressão Logística (sem receita)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod3 <- glm(inadimplente ~ balanco + estudante,data=conj_treino,family=binomial)\nsummary(mod3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n#> Call:\n#> glm(formula = inadimplente ~ balanco + estudante, family = binomial, \n#>     data = conj_treino)\n#> \n#> Coefficients:\n#>               Estimate Std. Error z value Pr(>|z|)    \n#> (Intercept) -1.040e+01  4.063e-01 -25.599  < 2e-16 ***\n#> balanco      5.530e-03  2.572e-04  21.502  < 2e-16 ***\n#> estudante   -7.443e-01  1.679e-01  -4.434 9.26e-06 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> (Dispersion parameter for binomial family taken to be 1)\n#> \n#>     Null deviance: 2212.3  on 7499  degrees of freedom\n#> Residual deviance: 1229.7  on 7497  degrees of freedom\n#> AIC: 1235.7\n#> \n#> Number of Fisher Scoring iterations: 8\n```\n:::\n\n```{.r .cell-code}\ncoef(mod3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   (Intercept)       balanco     estudante \n#> -10.400534967   0.005530031  -0.744295952\n```\n:::\n\n```{.r .cell-code}\nsummary(mod3)$coef\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>                  Estimate   Std. Error    z value      Pr(>|z|)\n#> (Intercept) -10.400534967 0.4062927404 -25.598624 1.580334e-144\n#> balanco       0.005530031 0.0002571844  21.502199 1.484829e-102\n#> estudante    -0.744295952 0.1678739139  -4.433661  9.264645e-06\n```\n:::\n:::\n\n\n## Comparando os modelos\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(mod2,mod3,test='LR')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Analysis of Deviance Table\n#> \n#> Model 1: inadimplente ~ balanco + receita + estudante\n#> Model 2: inadimplente ~ balanco + estudante\n#>   Resid. Df Resid. Dev Df Deviance Pr(>Chi)\n#> 1      7496     1227.8                     \n#> 2      7497     1229.7 -1  -1.9124   0.1667\n```\n:::\n:::\n\n\n## StepAIC\n\nAo invé de usarmos a estatística de Wald para selecionar as variáveis significativas, podemos usar o AIC (**equivalente ao Cp**) como usamos na regressão múltipla para selecionar as variáveis explicativas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MASS)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'MASS'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following object is masked from 'package:dplyr':\n#> \n#>     select\n```\n:::\n\n```{.r .cell-code}\nmod3a <- stepAIC(mod2, trace=FALSE)\nsummary(mod3a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n#> Call:\n#> glm(formula = inadimplente ~ balanco + estudante, family = binomial, \n#>     data = conj_treino)\n#> \n#> Coefficients:\n#>               Estimate Std. Error z value Pr(>|z|)    \n#> (Intercept) -1.040e+01  4.063e-01 -25.599  < 2e-16 ***\n#> balanco      5.530e-03  2.572e-04  21.502  < 2e-16 ***\n#> estudante   -7.443e-01  1.679e-01  -4.434 9.26e-06 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> (Dispersion parameter for binomial family taken to be 1)\n#> \n#>     Null deviance: 2212.3  on 7499  degrees of freedom\n#> Residual deviance: 1229.7  on 7497  degrees of freedom\n#> AIC: 1235.7\n#> \n#> Number of Fisher Scoring iterations: 8\n```\n:::\n:::\n\n\n## Avaliando o modelo novamente\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_chapeu <- predict(mod3, newdata = conj_teste, type = \"response\")\ny_chapeu <- ifelse(p_chapeu > 0.5, \"Sim\", \"Nao\") %>% factor(levels = levels(conj_teste$inadimplente))\nconfusionMatrix(y_chapeu, conj_teste$inadimplente, positive=\"Sim\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Confusion Matrix and Statistics\n#> \n#>           Reference\n#> Prediction  Nao  Sim\n#>        Nao 2411   52\n#>        Sim    9   28\n#>                                           \n#>                Accuracy : 0.9756          \n#>                  95% CI : (0.9688, 0.9813)\n#>     No Information Rate : 0.968           \n#>     P-Value [Acc > NIR] : 0.01497         \n#>                                           \n#>                   Kappa : 0.4679          \n#>                                           \n#>  Mcnemar's Test P-Value : 7.551e-08       \n#>                                           \n#>             Sensitivity : 0.3500          \n#>             Specificity : 0.9963          \n#>          Pos Pred Value : 0.7568          \n#>          Neg Pred Value : 0.9789          \n#>              Prevalence : 0.0320          \n#>          Detection Rate : 0.0112          \n#>    Detection Prevalence : 0.0148          \n#>       Balanced Accuracy : 0.6731          \n#>                                           \n#>        'Positive' Class : Sim             \n#> \n```\n:::\n:::\n\n\n## Mudando a probabilidade (limite) para aumentar a sensibilidade\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_chapeu <- predict(mod3, newdata = conj_teste, type = \"response\")\ny_chapeu <- ifelse(p_chapeu > 0.1, \"Sim\", \"Nao\") %>% \n             factor(levels = levels(conj_teste$inadimplente))\nconfusionMatrix(y_chapeu, conj_teste$inadimplente, positive=\"Sim\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Confusion Matrix and Statistics\n#> \n#>           Reference\n#> Prediction  Nao  Sim\n#>        Nao 2294   14\n#>        Sim  126   66\n#>                                           \n#>                Accuracy : 0.944           \n#>                  95% CI : (0.9343, 0.9527)\n#>     No Information Rate : 0.968           \n#>     P-Value [Acc > NIR] : 1               \n#>                                           \n#>                   Kappa : 0.4609          \n#>                                           \n#>  Mcnemar's Test P-Value : <2e-16          \n#>                                           \n#>             Sensitivity : 0.8250          \n#>             Specificity : 0.9479          \n#>          Pos Pred Value : 0.3438          \n#>          Neg Pred Value : 0.9939          \n#>              Prevalence : 0.0320          \n#>          Detection Rate : 0.0264          \n#>    Detection Prevalence : 0.0768          \n#>       Balanced Accuracy : 0.8865          \n#>                                           \n#>        'Positive' Class : Sim             \n#> \n```\n:::\n:::\n\n\n## Curva ROC modelo só com balanço\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pROC)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Type 'citation(\"pROC\")' for a citation.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'pROC'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following objects are masked from 'package:stats':\n#> \n#>     cov, smooth, var\n```\n:::\n\n```{.r .cell-code}\np_chapeu_log <- predict(mod1, newdata = conj_teste, type = \"response\")\nhead(p_chapeu_log)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>            1            2            3            4            5            6 \n#> 1.528225e-02 3.427305e-05 1.194412e-04 8.366062e-04 1.547585e-04 3.427305e-05\n```\n:::\n\n```{.r .cell-code}\nroc_log <- roc(conj_teste$inadimplente ~ p_chapeu_log, plot = TRUE, print.auc=FALSE, legacy.axes=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Setting levels: control = Nao, case = Sim\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Setting direction: controls < cases\n```\n:::\n\n::: {.cell-output-display}\n![](Aula09_files/figure-html/ROC-1.png){width=90%}\n:::\n\n```{.r .cell-code}\n# Area debaixo da curva\nas.numeric(roc_log$auc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0.9634969\n```\n:::\n:::\n\n\n## Curva ROC 2: Modelo com balanço + estudante\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_chapeu_log <- predict(mod3, newdata = conj_teste, type = \"response\")\nhead(p_chapeu_log)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>            1            2            3            4            5            6 \n#> 1.834561e-02 3.041528e-05 1.128128e-04 8.707966e-04 1.480726e-04 3.041528e-05\n```\n:::\n\n```{.r .cell-code}\nroc_log2 <- roc(conj_teste$inadimplente ~ p_chapeu_log, plot = TRUE, print.auc=FALSE, legacy.axes=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Setting levels: control = Nao, case = Sim\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Setting direction: controls < cases\n```\n:::\n\n::: {.cell-output-display}\n![](Aula09_files/figure-html/ROC2-1.png){width=90%}\n:::\n:::\n\n\n## AUC\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Area debaixo da curva\nas.numeric(roc_log2$auc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0.963564\n```\n:::\n:::\n\n\n## Melhor limite\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm_limite <- coords(roc_log2, \"best\", ret = \"threshold\")$threshold\nm_limite\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0.05107645\n```\n:::\n\n```{.r .cell-code}\np_chapeu <- predict(mod3, newdata = conj_teste, type = \"response\")\ny_chapeu <- ifelse(p_chapeu > m_limite, \"Sim\", \"Nao\") %>% \n             factor(levels = levels(conj_teste$inadimplente))\nconfusionMatrix(y_chapeu, conj_teste$inadimplente, positive=\"Sim\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Confusion Matrix and Statistics\n#> \n#>           Reference\n#> Prediction  Nao  Sim\n#>        Nao 2182    8\n#>        Sim  238   72\n#>                                          \n#>                Accuracy : 0.9016         \n#>                  95% CI : (0.8892, 0.913)\n#>     No Information Rate : 0.968          \n#>     P-Value [Acc > NIR] : 1              \n#>                                          \n#>                   Kappa : 0.3354         \n#>                                          \n#>  Mcnemar's Test P-Value : <2e-16         \n#>                                          \n#>             Sensitivity : 0.9000         \n#>             Specificity : 0.9017         \n#>          Pos Pred Value : 0.2323         \n#>          Neg Pred Value : 0.9963         \n#>              Prevalence : 0.0320         \n#>          Detection Rate : 0.0288         \n#>    Detection Prevalence : 0.1240         \n#>       Balanced Accuracy : 0.9008         \n#>                                          \n#>        'Positive' Class : Sim            \n#> \n```\n:::\n:::\n\n\n## Duas ROCs juntas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(roc_log)\nplot(roc_log2, add=TRUE, col=\"blue\")\nlegend(\"bottomright\", legend=c(\"Mod 1\", \"Mod2\"),\n       col=c(par(\"fg\"), \"blue\"), lwd=2)\n```\n\n::: {.cell-output-display}\n![](Aula09_files/figure-html/ROCs-1.png){width=90%}\n:::\n:::\n\n\n## Curva ROC 3 com o KNN\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ajustando KNN \nset.seed(23)\nctrl <- trainControl(method = \"cv\")\ntreina_knn <- train(inadimplente ~ scale(balanco) + estudante, method = \"knn\", trControl= ctrl, tuneGrid = data.frame(k = seq(5,140, by=5)), data = conj_treino)\n# treina_knn\nplot(treina_knn)\n```\n\n::: {.cell-output-display}\n![](Aula09_files/figure-html/ROC3-1.png){width=90%}\n:::\n\n```{.r .cell-code}\nprev_knn <- predict(treina_knn, conj_teste,type = \"prob\")\n\n## ROC\nroc_log2 <- roc(conj_teste$inadimplente ~ p_chapeu_log, plot = TRUE, print.auc=FALSE, col= \"black\", legacy.axes=TRUE) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Setting levels: control = Nao, case = Sim\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Setting direction: controls < cases\n```\n:::\n\n```{.r .cell-code}\nroc_knn1 <- roc(conj_teste$inadimplente ~ prev_knn[,2], plot = TRUE, print.auc=FALSE, col=\"green\", legacy.axes=TRUE, add=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Setting levels: control = Nao, case = Sim\n#> Setting direction: controls < cases\n```\n:::\n\n```{.r .cell-code}\nlegend(\"bottomright\",legend=c(\"Reg. Log\", \"KNN\"), \n       col=c(\"black\",\"green\"),lwd=4)\n```\n\n::: {.cell-output-display}\n![](Aula09_files/figure-html/ROC3-2.png){width=90%}\n:::\n\n```{.r .cell-code}\n# Area abaixo da curva\n# Regressão Logística\nas.numeric(roc_log2$auc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0.963564\n```\n:::\n\n```{.r .cell-code}\n## KNN\nas.numeric(roc_knn1$auc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0.956126\n```\n:::\n:::\n",
    "supporting": [
      "Aula09_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}