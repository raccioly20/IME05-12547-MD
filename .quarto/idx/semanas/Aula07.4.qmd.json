{"title":"Regularização de Modelos","markdown":{"yaml":{"title":"Regularização de Modelos","author":"Ricardo Accioly","date":"`r Sys.Date()`","format":{"html":{"code-link":true}}},"headingText":"Regularização de modelos","containsRefs":false,"markdown":"\n\n\n## Carregando Bibliotecas\n\n```{r bibliotecas, warning=FALSE, message=FALSE}\nlibrary(tidyverse)\nlibrary(glmnet)\n```\n\n## Carregando os dados\n\nVendas de casas em Seattle entre 2015 e 2016\n\n```{r Dados}\nvendas_casa <- readRDS(\"home_sales.rds\")\nhead(vendas_casa)\nvendas_casa <- vendas_casa %>% rename(preco=selling_price,\n                                      idade=home_age,\n                                      quartos=bedrooms,\n                                      banheiros= bathrooms,\n                                      m2_princ=sqft_living,\n                                      m2_tot=sqft_lot,\n                                      m2_porao=sqft_basement,\n                                      andares=floors\n                                      )\nsummary(vendas_casa)\nvendas_casa <- vendas_casa %>% mutate(preco_m=preco/1000) %>% select(-preco)\nsummary(vendas_casa)\n```\n\n## Conjunto de treino e de teste\n\n```{r treino_teste}\nlibrary(caret)\nset.seed(21)\nnrow(vendas_casa)\ny <- vendas_casa$preco_m\nindice_teste <- createDataPartition(y, times = 1, p = 0.2, list = FALSE)\n\nconj_treino <- vendas_casa[-indice_teste,]\nconj_teste <- vendas_casa[indice_teste,]\n\nstr(conj_treino)\nstr(conj_teste)\ngt::gt(head(conj_treino, 10))\n```\n\n## Métodos de Regularização\n\nO pacote glmnet não usa a linguagem de formula, em particular nós devemos passar $x$ como uma matriz e $y$ como um vetor, pois não se usa a sintaxe $y \\sim x$. Com isso será necessário ajustar x e y. A função model.matrix() é particularmente útil para criar x; não só produz uma matriz correspondente as variáveis explicativas, **mas também transforma automaticamente quaisquer variáveis qualitativas em variáveis dummy. Esta última propriedade é importante porque o glmnet() só pode tomar insumos numéricos e quantitativos.**\n\n**O pacote glmnet também por default padroniza as variáveis, o que é importante para a regressão Ridge e também para o LASSO. Ele posteriormente retorna os coeficientes para a escala inicial.**\n\n```{r preparando_dados}\nx_treino <- model.matrix(preco_m ~ . , data = conj_treino)[, -1]\ny_treino <- conj_treino$preco_m\n\nx_teste <- model.matrix(preco_m ~ . , data = conj_teste)[, -1]\ny_teste = conj_teste$preco_m\n```\n\n## Regressão Ridge\n\nPrimeiro vamos ajustar um modelo de regressão Ridge. Isso é conseguido chamando `glmnet()` com `alpha=0`, se `alpha=1` então `glmnet()` ajusta um lasso.(veja o arquivo de ajuda).\n\n```{r Ridge}\n## Estabelecendo um grid de valores para lambda\ngrid <- 10^seq(-2, 10, length = 100)\najusreg.ridge <- glmnet(x_treino, y_treino, alpha=0, lambda = grid)\n\n```\n\nPor padrão, a função `glmnet()` executa a regressão ridge automaticamente selecionando a faixa de valores de $\\lambda$. No entanto, aqui nós escolhemos implementar usando uma grade de valores que variam de $\\lambda = 10^{-2}$ a $\\lambda = 10^{10}$, cobrindo toda a gama de cenários do modelo nulo contendo apenas o coeficiente linear até o ajuste dos mínimos quadrados.\n\nTambém podemos calcular o modelo para um valor particular de $\\lambda$ que não é um dos valores de grade. Observe que, por padrão, a função `glmnet()` padroniza as variáveis para que elas estejam na mesma escala. **Esta padronização é muito importante no caso da regressão Ridge, pois ela é afetada pela mudança de escala das variáveis explicativas.**\n\nAssociado a cada valor de $\\lambda$ existe um vetor de coeficientes de regressão de ridge, que é armazenado em uma matriz que pode ser acessada por 'coef()'. Neste caso, é uma matriz $13 \\times 100$, com 13 linhas (uma para cada preditor, mais uma para o coeficiente linear) e 100 colunas (uma para cada valor de $\\lambda$).\n\n```{r r1}\ndim(coef(ajusreg.ridge))\nplot(ajusreg.ridge, xvar=\"lambda\", label=TRUE) # Representando os coeficientes\n\n```\n\nQuando $\\lambda$ é grande o esperado é que os coeficentes sejam pequenos e quando $\\lambda$ é pequeno os coeficientes assumem valores maiores.\n\n```{r r2}\najusreg.ridge$lambda[1] # Mostra primeiro valor de lambda\ncoef(ajusreg.ridge)[,1] # Mostra os coeficientes associados com o primeiro valor\najusreg.ridge$lambda[100] # Mostra centésimo valor de lambda\ncoef(ajusreg.ridge)[,100] # Mostra os coeficientes associados com o centésimo valor\n```\n\n```{r r3}\nlibrary(plotmo)\nplot_glmnet(ajusreg.ridge)\n```\n\n## Cross-Validation no Ridge\n\nNós podemos usar o k-fold cross validation para identificar o melhor valor de $\\lambda$\n\nA biblioteca glmnet já tem internamente uma função para uso do crosss validation. O default são 10 envelopes de dados `nfold=10`.\n\n```{r r4}\nset.seed(21)\nridge_cv <- cv.glmnet(x_treino,y_treino, alpha=0) ## por padrão k=10\nplot(ridge_cv)\nm_lamb <- ridge_cv$lambda.min  # Seleciona o lambda que minimiza o MSE (EQM) de treino\nm_lamb\nlog(m_lamb)\ncoef(ridge_cv, s=m_lamb)\n```\n\n## Avaliando com conjunto de teste\n\nEm seguida avaliamos seu MSE no conjunto de teste, usando $\\lambda$ = m_lamb. Observe o uso da função 'predict()': desta vez temos previsões para um conjunto de teste, com o argumento `newx`.\n\n```{r avaliando}\najusreg.ridge2 <- glmnet(x_treino, y_treino, alpha=0, lambda = m_lamb)\ny_prev <- predict(ajusreg.ridge2, s = m_lamb, newx = x_teste)\n# Metricas de desempenho\nsqrt(mean((y_prev - y_teste)^2))\n```\n\n## Comparando real vs previsão no conjunto de teste\n\n```{r}\nv_teste <- data.frame(y_teste, y_prev)\nggplot(v_teste, aes(x=y_prev, y=y_teste)) +geom_point() +\n  geom_abline(color = \"darkblue\") +\n  ggtitle(\"Preço da Casa vs. Previsões do modelo Ridge\")\n```\n\n## LASSO\n\nPrimeiro ajustamos com todos os dados como no caso do Ridge\n\n```{r LASSO}\najusreg.lasso <- glmnet(x_treino,y_treino, alpha = 1)\nplot(ajusreg.lasso, xvar=\"lambda\", label=TRUE) # Representando os coeficientes\nplot_glmnet(ajusreg.lasso)\n```\n\n## Validação Cruzada no LASSO\n\n```{r Lasso2}\nlasso_cv <- cv.glmnet(x_treino,y_treino, alpha = 1)\nplot(lasso_cv)\nm_lamb1 <- lasso_cv$lambda.min  # Seleciona o lambda que minimiza o MSE de treino\nm_lamb1\nlog(m_lamb1)\ncoef(lasso_cv, s=m_lamb1)\n```\n\n## Avaliando com conjunto de teste\n\n```{r lasso2}\najusreg.lasso2 <- glmnet(x_treino, y_treino, alpha=1, lambda = m_lamb1)\ny_prev <- predict(ajusreg.lasso2, s = m_lamb1, newx = x_teste)\n# Metricas de desempenho\nsqrt(mean((y_prev - y_teste)^2))\n```\n\n## Comparando real vs previsão no conjunto de teste\n\n```{r}\nv_teste <- data.frame(y_teste, y_prev)\nggplot(v_teste, aes(x=y_prev, y=y_teste)) +geom_point() +\n  geom_abline(color = \"darkblue\") +\n  ggtitle(\"Preço da Casa vs. Previsões do modelo Ridge\")\n```\n","srcMarkdownNoYaml":"\n\n## Regularização de modelos\n\n## Carregando Bibliotecas\n\n```{r bibliotecas, warning=FALSE, message=FALSE}\nlibrary(tidyverse)\nlibrary(glmnet)\n```\n\n## Carregando os dados\n\nVendas de casas em Seattle entre 2015 e 2016\n\n```{r Dados}\nvendas_casa <- readRDS(\"home_sales.rds\")\nhead(vendas_casa)\nvendas_casa <- vendas_casa %>% rename(preco=selling_price,\n                                      idade=home_age,\n                                      quartos=bedrooms,\n                                      banheiros= bathrooms,\n                                      m2_princ=sqft_living,\n                                      m2_tot=sqft_lot,\n                                      m2_porao=sqft_basement,\n                                      andares=floors\n                                      )\nsummary(vendas_casa)\nvendas_casa <- vendas_casa %>% mutate(preco_m=preco/1000) %>% select(-preco)\nsummary(vendas_casa)\n```\n\n## Conjunto de treino e de teste\n\n```{r treino_teste}\nlibrary(caret)\nset.seed(21)\nnrow(vendas_casa)\ny <- vendas_casa$preco_m\nindice_teste <- createDataPartition(y, times = 1, p = 0.2, list = FALSE)\n\nconj_treino <- vendas_casa[-indice_teste,]\nconj_teste <- vendas_casa[indice_teste,]\n\nstr(conj_treino)\nstr(conj_teste)\ngt::gt(head(conj_treino, 10))\n```\n\n## Métodos de Regularização\n\nO pacote glmnet não usa a linguagem de formula, em particular nós devemos passar $x$ como uma matriz e $y$ como um vetor, pois não se usa a sintaxe $y \\sim x$. Com isso será necessário ajustar x e y. A função model.matrix() é particularmente útil para criar x; não só produz uma matriz correspondente as variáveis explicativas, **mas também transforma automaticamente quaisquer variáveis qualitativas em variáveis dummy. Esta última propriedade é importante porque o glmnet() só pode tomar insumos numéricos e quantitativos.**\n\n**O pacote glmnet também por default padroniza as variáveis, o que é importante para a regressão Ridge e também para o LASSO. Ele posteriormente retorna os coeficientes para a escala inicial.**\n\n```{r preparando_dados}\nx_treino <- model.matrix(preco_m ~ . , data = conj_treino)[, -1]\ny_treino <- conj_treino$preco_m\n\nx_teste <- model.matrix(preco_m ~ . , data = conj_teste)[, -1]\ny_teste = conj_teste$preco_m\n```\n\n## Regressão Ridge\n\nPrimeiro vamos ajustar um modelo de regressão Ridge. Isso é conseguido chamando `glmnet()` com `alpha=0`, se `alpha=1` então `glmnet()` ajusta um lasso.(veja o arquivo de ajuda).\n\n```{r Ridge}\n## Estabelecendo um grid de valores para lambda\ngrid <- 10^seq(-2, 10, length = 100)\najusreg.ridge <- glmnet(x_treino, y_treino, alpha=0, lambda = grid)\n\n```\n\nPor padrão, a função `glmnet()` executa a regressão ridge automaticamente selecionando a faixa de valores de $\\lambda$. No entanto, aqui nós escolhemos implementar usando uma grade de valores que variam de $\\lambda = 10^{-2}$ a $\\lambda = 10^{10}$, cobrindo toda a gama de cenários do modelo nulo contendo apenas o coeficiente linear até o ajuste dos mínimos quadrados.\n\nTambém podemos calcular o modelo para um valor particular de $\\lambda$ que não é um dos valores de grade. Observe que, por padrão, a função `glmnet()` padroniza as variáveis para que elas estejam na mesma escala. **Esta padronização é muito importante no caso da regressão Ridge, pois ela é afetada pela mudança de escala das variáveis explicativas.**\n\nAssociado a cada valor de $\\lambda$ existe um vetor de coeficientes de regressão de ridge, que é armazenado em uma matriz que pode ser acessada por 'coef()'. Neste caso, é uma matriz $13 \\times 100$, com 13 linhas (uma para cada preditor, mais uma para o coeficiente linear) e 100 colunas (uma para cada valor de $\\lambda$).\n\n```{r r1}\ndim(coef(ajusreg.ridge))\nplot(ajusreg.ridge, xvar=\"lambda\", label=TRUE) # Representando os coeficientes\n\n```\n\nQuando $\\lambda$ é grande o esperado é que os coeficentes sejam pequenos e quando $\\lambda$ é pequeno os coeficientes assumem valores maiores.\n\n```{r r2}\najusreg.ridge$lambda[1] # Mostra primeiro valor de lambda\ncoef(ajusreg.ridge)[,1] # Mostra os coeficientes associados com o primeiro valor\najusreg.ridge$lambda[100] # Mostra centésimo valor de lambda\ncoef(ajusreg.ridge)[,100] # Mostra os coeficientes associados com o centésimo valor\n```\n\n```{r r3}\nlibrary(plotmo)\nplot_glmnet(ajusreg.ridge)\n```\n\n## Cross-Validation no Ridge\n\nNós podemos usar o k-fold cross validation para identificar o melhor valor de $\\lambda$\n\nA biblioteca glmnet já tem internamente uma função para uso do crosss validation. O default são 10 envelopes de dados `nfold=10`.\n\n```{r r4}\nset.seed(21)\nridge_cv <- cv.glmnet(x_treino,y_treino, alpha=0) ## por padrão k=10\nplot(ridge_cv)\nm_lamb <- ridge_cv$lambda.min  # Seleciona o lambda que minimiza o MSE (EQM) de treino\nm_lamb\nlog(m_lamb)\ncoef(ridge_cv, s=m_lamb)\n```\n\n## Avaliando com conjunto de teste\n\nEm seguida avaliamos seu MSE no conjunto de teste, usando $\\lambda$ = m_lamb. Observe o uso da função 'predict()': desta vez temos previsões para um conjunto de teste, com o argumento `newx`.\n\n```{r avaliando}\najusreg.ridge2 <- glmnet(x_treino, y_treino, alpha=0, lambda = m_lamb)\ny_prev <- predict(ajusreg.ridge2, s = m_lamb, newx = x_teste)\n# Metricas de desempenho\nsqrt(mean((y_prev - y_teste)^2))\n```\n\n## Comparando real vs previsão no conjunto de teste\n\n```{r}\nv_teste <- data.frame(y_teste, y_prev)\nggplot(v_teste, aes(x=y_prev, y=y_teste)) +geom_point() +\n  geom_abline(color = \"darkblue\") +\n  ggtitle(\"Preço da Casa vs. Previsões do modelo Ridge\")\n```\n\n## LASSO\n\nPrimeiro ajustamos com todos os dados como no caso do Ridge\n\n```{r LASSO}\najusreg.lasso <- glmnet(x_treino,y_treino, alpha = 1)\nplot(ajusreg.lasso, xvar=\"lambda\", label=TRUE) # Representando os coeficientes\nplot_glmnet(ajusreg.lasso)\n```\n\n## Validação Cruzada no LASSO\n\n```{r Lasso2}\nlasso_cv <- cv.glmnet(x_treino,y_treino, alpha = 1)\nplot(lasso_cv)\nm_lamb1 <- lasso_cv$lambda.min  # Seleciona o lambda que minimiza o MSE de treino\nm_lamb1\nlog(m_lamb1)\ncoef(lasso_cv, s=m_lamb1)\n```\n\n## Avaliando com conjunto de teste\n\n```{r lasso2}\najusreg.lasso2 <- glmnet(x_treino, y_treino, alpha=1, lambda = m_lamb1)\ny_prev <- predict(ajusreg.lasso2, s = m_lamb1, newx = x_teste)\n# Metricas de desempenho\nsqrt(mean((y_prev - y_teste)^2))\n```\n\n## Comparando real vs previsão no conjunto de teste\n\n```{r}\nv_teste <- data.frame(y_teste, y_prev)\nggplot(v_teste, aes(x=y_prev, y=y_teste)) +geom_point() +\n  geom_abline(color = \"darkblue\") +\n  ggtitle(\"Preço da Casa vs. Previsões do modelo Ridge\")\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"Aula07.4.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.549","editor":"visual","theme":{"light":["cosmo","../theme.scss"],"dark":["cosmo","../theme-dark.scss"]},"mainfont":"Atkinson Hyperlegible","code-copy":true,"title":"Regularização de Modelos","author":"Ricardo Accioly","date":"`r Sys.Date()`"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}